#!java -Djdk.net.registerGopherProtocol=true -cp dist/dbat.jar org.teherba.common.RegressionTester

# Collection of Testcases for Dbat with MySQL driver
# @(#) $Id: all.tca 955 2012-06-05 07:22:59Z gfis $
# 2016-05-24: + CC1
# 2016-05-10: TL%, UA%
# 2014-04-22: + TI1,2
# 2014-03-10: + DF1-3
# 2014-03-05: + XS7, +V1*
# 2013-02-01: web/spec/test/fragment01.xml
# 2013-01-05: rm U0*, add TL1-4, UR1-7
# 2012-11-24: for RegressionTester
# 2012-11-22: new H03, H04, TN1, TN2; explicit QUERY_STRING
# 2012-10-19: <counter> tests
# 2012-06-19: GREP ... d{2})T => d{2})T
# 2012-06-12: all clean again for github
# 2012-05-08: V0% pass with method="post"; A01 FAILED, 156 passed tests
# 2011-10-10: <choose> conditional compilation
# 2011-08-10, Dr. Georg Fischer: extracted from batch_test.pl
#-----------------------------------
# Caution:
# (1) Adjust the following line: URL where Dbat was deployed
URL=http://localhost:8080/dbat/servlet
# (2) Adjust the following line: property file for your database connection
ARGS=-c etc/worddb.properties -e UTF-8
# (3) Test cases UR2 (gopher) and UR3 (ftp) access sites on the Internet; check all URLs in UR1-UR5.
# (4) Y06 throws a lot of Java stackdump messages to STDERR on purpose.
#======================================================================
# normally the main method of class Dbat in the following package is CALLed
PACKAGE=org.teherba.dbat

ECHO 000
#-------------------
# Parameters in <a /> elements
TEST A01 parameterized link with defaults
CALL Dbat -m html -f web/spec/test/parmlink.xml

TEST A02 parameterized link with parameters
CALL Dbat -m html -p name=F -p year=2013 -f web/spec/test/parmlink.xml

TEST A03 Web parameterized link with defaults
HTTP spec=test/parmlink

TEST A04 Web parameterized link with parameters
HTTP spec=test/parmlink name=F year=2013
#-------------------
TEST B01 create table with BLOB
DATA --
  drop table if exists b01 ;
  create table b01
  ( name varchar(16) not null
  , content BLOB
  ) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_bin;
  commit;
CALL Dbat -f $(DATA)

TEST B02 insert statements
DATA -- fill table
    delete from b01;
    insert into b01 values('Martha'  , 'This is a BLOB: Martha was born in Freiburg, and she also died in Freiburg in 1999.');
    select * from b01;
CALL Dbat -f $(DATA)

TEST B03 describe BLOB table
CALL Dbat -d b01

TEST B04 create table with CLOB
DATA --
  DROP TABLE if exists b04;
  CREATE TABLE            b04
  ( name VARCHAR(16) not null   COMMENT 'key for the LOB'
  , len  INT                    COMMENT 'size of the LOB content'
  , content TEXT                COMMENT 'character large object (CLOB)'
  ) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_bin;
  COMMIT;
CALL Dbat -f $(DATA)

TEST B05 describe CLOB table
CALL Dbat -d b04

TEST B06 insert from URI into CLOB
DATA #
 noversion 194706 web/noversion.txt
 B04.data.tmp 2906 test/B04.data.tmp
 B06.data.tmp 64 test/B06.data.tmp
CALL Dbat -r b04 $(DATA)

# TEST B07 select from CLOB
# CALL Dbat "select * from b04"

TEST B08 insert into CLOB
DATA -- fill table
    insert into b04 values('align01'    , 194706, 'web/spec/test/align01.xml');
    insert into b04 values('index.jsp'  , 2906, 'http://localhost:8080/dbat/index.jsp');
CALL Dbat -f $(DATA)

TEST B09 select from CLOB
CALL Dbat "select * from b04"

TEST B10 create table with image filenames
DATA #
  DROP TABLE if exists im1;
  CREATE TABLE            im1
  ( imagefile VARCHAR(128) not null   COMMENT 'image filename with path'
  , imagename VARCHAR(32)  not null   COMMENT 'name without path'
  , bytesize  INT                     COMMENT 'size of the file in bytes'
  , description VARCHAR(1024)         COMMENT 'text with embedded HTML'
  ) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_bin;
  COMMIT;
CALL Dbat -f $(DATA)

TEST B11 populate table with raw image data
CALL Dbat -m csv -r im1 web/img/flowers/flowers.dir

TEST B12 show iamge table values
CALL Dbat -m csv -s "\t" -1024 im1
#-------------------
TEST C01 create table
DATA #
  drop table if exists c01 ;
  create table c01
  ( name varchar(16) not null   COMMENT 'Name of the Relative'
  , univ varchar(16)            COMMENT 'Town'
  , year int                    COMMENT 'Decease Year'
  , gender char(1)              COMMENT 'some escaped character'
  , birth  date
  , primary key (name)
  ) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_bin;
  commit;
CALL Dbat -f $(DATA)
#-------------------
# help page
TEST H01 help messages
CALL Dbat -h

TEST H02 help messages - 0 arguments
CALL Dbat

TEST H03 web help page en
HTTP view=help lang=en

TEST H04 web help page de
HTTP view=help lang=de
#-------------------
# more page
TEST MR1 more web page en
HTTP view=more spec=test.index lang=en

TEST MR2 more web de
HTTP view=more spec=test.index lang=de

TEST MR3 SQL console web en
HTTP view=con lang=en

TEST MR4 SQL console web de
HTTP view=con lang=de

TEST MR5 license web
HTTP view=license

TEST MR6 notice web
HTTP view=notice
#-------------------
TEST I01 insert statements
DATA -- fill table
    delete from c01;
    insert into c01 values('Martha'  , 'Freiburg'       , 1999, '&', '1909-11-17');
    insert into c01 values('Johannes', 'Schramberg'     , 1992, '<', '1911-06-03');
    insert into c01 values('Eberhard', 'Groß-Gerau'     , 1945, '>', '1912-11-17');
    insert into c01 values('Fritz'   , 'Waldshut'       , 1995, '<', '1907-08-08');
    insert into c01 values('Maria'   , 'Hermsdorf'      , 1999, '#', '1914-09-17');
    insert into c01 values('Ilse'    , 'Lübars'         , 1983, '$', '1909-02-09');
    insert into c01 values('Dorothea', 'Lübars'         , 1985, '$', '1910-02-07');
    insert into c01 values('Lucie'   , 'Lübars'         , 1984, '''','1887-07-09');
    commit;
    select * from c01;
CALL Dbat -f $(DATA)

TEST I02 include with system entities
HTTP spec=test/includer

TEST I03 check for ANSI concatenation with '||'
CALL Dbat "SELECT name || ' ' || univ FROM c01 order by name"
#-------------------
# Connection switch
TEST CS1 connection switch to mysql
HTTP spec=test/switchconn
#-------------------
# Connection Id from HTTP request
TEST CI1 connection id worddb in request
HTTP spec=test/minusconn tabname=c01 conn=worddb

TEST CI2 connection id mysql in request
HTTP spec=test/minusconn tabname=c01 conn=mysql
#-------------------
# counter tests
TEST CN1 default counter en
HTTP spec=test/counter01 name=x lang=en

TEST CN2 default counter de
HTTP spec=test/counter01 name=x lang=de

TEST CN3 counter with 1 result
HTTP spec=test/counter01 name=Ilse

TEST CN4 counter with 2 results
HTTP spec=test/counter01 name=Ma%

TEST CN5 counter with 0 results
HTTP spec=test/counter01 name=x
#-------------------
# de1 = table with decimals
TEST DE1 create table with DECIMALs
DATA #
  DROP TABLE IF EXISTS de1;
  create table de1
  ( name0  VARCHAR  (16) not null
  , dec1   DECIMAL  (18)
  , dec2   DECIMAL  (18,3)
  , date3  DATE
  , fill1  VARCHAR  (1)
  , time4  TIME
  , fill2  VARCHAR  (1)
  , ts5    TIMESTAMP
  , PRIMARY KEY (name0)
  ) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_bin;
  commit;
CALL Dbat -f $(DATA)

TEST DE2 fill table with DECIMALs
DATA #
  insert into de1 values('row1', 123456780123456789, 123456.345, {d '2011-08-01'}, ' ', {t '23:13:00'}, ' ', {ts '2011-08-01 23:13:00.000'});
  insert into de1 values('row2', 194706290530000000, 194706.290, {d '1981-08-09'}, ' ', {t '11:30:00'}, ' ', {ts '1981-08-09 11:30:00.000'});
  commit;
  select * from de1 order by name0;
  commit;
CALL Dbat -f $(DATA)

TEST DE3 fill table with DECIMALs, verbose output
DATA #
  insert into de1 values('row3', 123456780123456789, 123456.345, {d '2011-08-01'}, ' ', {t '23:13:00'}, ' ', {ts '2011-08-01 23:13:00.000'});
  insert into de1 values('row4', 194706290530000000, 194706.290, {d '1981-08-09'}, ' ', {t '11:30:00'}, ' ', {ts '1981-08-09 11:30:00.000'});
  commit;
  select * from de1 order by name0;
  commit;
CALL Dbat -v -f $(DATA)

TEST DE4 decimal table as sql
CALL Dbat -m sql    -200 de1

TEST DE5 decimal table as jdbc
CALL Dbat -m jdbc   -200 de1

TEST DE6 decimal table as sql updates
CALL Dbat -m update -200 de1

TEST DE7 decimal table as json
CALL Dbat -m json   -200 de1

TEST DE8 decimal table as fix
CALL Dbat -m fix    -200 de1

TEST WE8 decimal table as HTML
CALL Dbat -m html   -200 de1

TEST DE8E decimal table as Excel-2007
CALLZ Dbat -m xlsx   -200 de1

TEST WE9E decimal table as Excel-2007
HTTPZ test/selecde1 mode=xlsx

TEST DF1 raw input of decimal and date/time formats
DATA #
 row5;194706290530000005;194706.295;1981-08-05;;11:30:05;;1981-08-05 11:30:05.005
CALL Dbat -m csv -s ";" -r de1 test/DF1.data.tmp

TEST DF2 check raw input of decimal and date/time formats
CALL Dbat -m csv -s ";" -222 de1

TEST DF3 cleanup
CALL Dbat "delete from de1 where name0 = 'row5';"
#-------------------
# stored procedures
TEST X00 create procedure x00
DATA #
  DROP   PROCEDURE if exists x00 $
  CREATE PROCEDURE x00 (IN part varchar(20), OUT num int, OUT last varchar(20))
  BEGIN
    SELECT count(*), max(name)
    INTO num, last
    FROM c01
    WHERE name LIKE concat('%', concat(part, '%'));
  END
  $
CALL Dbat -v -sp "$" -f $(DATA)

TEST X01 create procedure x01 with 2 result sets
DATA #
  DROP   PROCEDURE if exists x01 $
  CREATE PROCEDURE x01 (IN x CHAR(1))
  BEGIN
    SELECT *
    FROM c01
    WHERE name like '%r%' ;
    SELECT name, birth
    FROM c01 ;
  END
  $
CALL Dbat -v -sp "$" -f $(DATA)

TEST X02 call procedure x01 with 2 result sets
CALL Dbat -m tsv -call x01 -in 7

TEST X03 call command
CALL Dbat -m html -call x00 -in i -out:int -out:varchar

TEST X04 call from specification
CALL Dbat -m html -p part=i -f web/spec/test/callproc.xml

TEST X05 call by servlet
HTTP spec=test/callproc

TEST X06 call by servlet with parameter
HTTP spec=test/callproc part=or

TEST X07 create procedure x07
DATA #
  DROP   PROCEDURE if exists x07 $
  CREATE PROCEDURE x07
    ( IN  iname0 VARCHAR(16)
    , OUT odec1  DECIMAL(18)
    , OUT odec2  DECIMAL(18,3)
    , OUT odate3 DATE
    , OUT otime4 TIME
    , OUT ots5   TIMESTAMP
    )
  BEGIN
    SELECT dec1, dec2, date3, time4, ts5
    INTO   odec1, odec2, odate3, otime4, ots5
    FROM de1
    WHERE name0 = iname0;
  END
  $
CALL Dbat -v -sp "$" -f $(DATA)

TEST X08 call procedure x07 with DECIMALs and TIME fields
CALL Dbat -m html -call x07 -in row2 -out:DECIMAL -out:DECIMAL -out:DATE -out:TIME -out:TIMESTAMP

TEST X09 describe procedure x07
CALL Dbat -m sql -d x07

TEST X10 call procedure x07 into parm
HTTP spec=test/callx10 iname0=row2
#-------------------
# Tests for the proper output of dbiv_dbat.xsl
TEST XS1 generate an interactive form for native SQL with INT key
XSLT web/xslt/dbiv_dbat.xsl web/spec/test/crud01.iv.xml

TEST XS2 generate an interactive form for a stored procedure
XSLT web/xslt/dbiv_dbat.xsl web/spec/test/crud02.iv.xml

TEST XS3 generate an interactive form for native SQL with CHAR keys
XSLT web/xslt/dbiv_dbat.xsl web/spec/test/crud03.iv.xml

TEST XS4 generate an interactive form with AJAX subquery
XSLT web/xslt/dbiv_dbat.xsl web/spec/test/crud04.iv.xml

TEST XS5 generate a non-altering search form
XSLT --stringparam alter 0 web/xslt/dbiv_dbat.xsl web/spec/test/crud01.iv.xml

TEST XS6 whereClause copied with parm
XSLT web/xslt/dbiv_dbat.xsl web/spec/test/crud05.iv.xml

TEST XS7 not all fields editable
XSLT web/xslt/dbiv_dbat.xsl web/spec/test/crud06.iv.xml
#-------------------
# Ajax tests
TEST AX1 get an insert form containing an Ajax request
HTTP spec=test.ajax01 name=Ilse

TEST AX2 get an Ajax request in JSON
HTTP spec=test.ajax02 name=Ilse mode=json
#-------------------
# <parm format="..." />
TEST F01 <parm format="..." />
CALL Dbat -m html -f web/spec/test/parmform.xml -p VALUE=That+is+the+1st+value -p value=That+is+the+2nd+value

TEST F02 <parm format="..." />
HTTP spec=test.parmform&VALUE=That+is+the+1st+value&value=That+is+the+2nd+value
#-------------------
# Javascript and Images
TEST IM1 show 6 flowers
HTTP spec=test.image01

TEST IM2 page break after each image
HTTP spec=test.image02
#-------------------
# list box fields
TEST L01 List Box and List Parameters - init values
HTTP spec=test/listbox

TEST L02 List Box and List Parameters - preset parameters
HTTP spec=test/listbox namebox=J namebox=E birthint=1910 birthchar=1914
#-------------------
# Textarea fields
TEST LT1 Textarea - init values
HTTP spec=test/textarea

TEST LT2 Textarea - preset parameters
HTTP spec=test/textarea wordlist=phi+omikron WORDLIST=kappa+lambda

TEST LT3 Textarea - preset parameters
HTTP spec=test/textarea wordlist=phi+omikron WORDLIST=kappa+lambda
#-------------------
# multiple javascripts and stylesheets
TEST MU1 multiple Javascripts
HTTP spec=test/multijs

TEST MU2 multiple Stylesheets
HTTP spec=test/multicss
#-------------------
# error handling tests
TEST Y01 error message: spec file not found
HTTP spec=test/wrong_spec_file

TEST Y02 error message: spec file not found, in German
HTTP spec=test/wrong_spec_file lang=de

TEST Y03 redirected spec file
HTTP spec=test/select01

TEST Y04 redirected spec file, in German
HTTP spec=test/select01 lang=de

TEST Y05 spec file with dot
HTTP spec=test.selec01

TEST Y06 XML syntax error, CLI
CALL Dbat -m html  -f web/spec/test/badxml.xml 2> nul

TEST Y07 XML syntax error, web
HTTP spec=test.badxml

TEST Y08 redirected spec file, wait time 0 s
HTTP spec=test.redir0

TEST Y09 redirected spec file, wait time 3 s, German
HTTP spec=test.redir3

TEST Y10 rewriting with JavaScript - otherwise
HTTP spec=test.rewrite DBSYS=ORA0

TEST Y11 rewriting with JavaScript - when
HTTP spec=test.rewrite DBSYS=ORA1
#-------------------
# console page
TEST SC1 show SQL console page
HTTP spec=test/index view=con

TEST SC2 submit SQL from console
HTTP spec=test/index view=con2 enc=ISO-8859-1 lang=en mode=html conn=worddb intext=select+*+from+de1

TEST SC3 submit SQL from console with limit 8
HTTP spec=test/index view=con2 enc=ISO-8859-1 lang=en mode=html conn=worddb intext=select+*+from+de1 fetch=8
#--------------------
TEST SS1 explicit stylesheet
HTTP spec=test/stylesheet1
#======================================================================
# now CALL the main methods of some other classes in org.teherba.common
PACKAGE=org.teherba.common
ARGS=

TEST CT1 tokenizing preprogrammed commandline string
CALL CommandTokenizer

TEST CT2 tokenizing from file
DATA #
    call -in '2011-07-21 17:39:00'
    call  my.pr1 -in "2 double quoted" -in:int 29647 -in '3 single quoted';
CALL CommandTokenizer -f $(DATA)

TEST CT3 tokenizing from file with SQL syntax
DATA #
    call -in '2011-07-21 17:39:00'
    call  my.pr1 -in "2 double quoted" -in:int 29647 -in '3 single quoted';
CALL CommandTokenizer -sql $(DATA)
#-------------------------------
# URIReader schema testing
PACKAGE=org.teherba.common
ARGS=
TEST UR1 http schema
CALL URIReader "http://localhost:8080/dbat/noversion.txt"

# the following works with an Internet connection only
# TEST UR2 gopher schema
# CALL URIReader "gopher://gopher.rbfh.de/0/Fun/500miles.txt"

# the following works with an Internet connection only
# TEST UR3 ftp schema
# CALL URIReader "ftp://ftp.gnu.org/README"

TEST UR4 file schema
CALL URIReader "file://$(PWD)/web/noversion.txt"
# CALL URIReader "file:///c:\\users\gfis\work\gits\dbat/web/noversion.txt"

TEST UR5 jar-file schema
CALL URIReader "jar:file://$(PWD)/dist/dbat.jar!/META-INF/LICENSE"
# CALL URIReader "jar:file:///c:\\users\gfis\work\gits\dbat\dist\dbat.jar!/META-INF/LICENSE"

TEST UR6 relative file
CALL URIReader "web/noversion.txt"

TEST UR7 data URI
CALL URIReader "data:this+is%20the+text+to+be+read" UTF-8
#======================================================================
# back to the main method of class Dbat
PACKAGE=org.teherba.dbat
ARGS=-c etc/worddb.properties -e UTF-8

# File tayloring mode
TEST TL1 file tayloring - head+tail
DATA -- tayloring with surrounding escape
  {name} was born {birth}.
  The symbol is {gender}.
  Died in {univ} in year {year}.
CALL Dbat -m taylor -s "{}" -u $(DATA) "select * from c01"

TEST TL2 describe tayloring variables
DATA -- tayloring with surrounding escape
  {name} was born {birth}.
  The symbol is {gender}.
  Died in {univ} in year {year}.
CALL Dbat -m taylor -s "{}" -u $(DATA) -t c01

TEST TL3 file tayloring - head only
DATA -- tayloring with leading escape
  [name was born [birth.
  The symbol is [gender.
  Died in [univ in year [year.
CALL Dbat -m taylor -s "[" -u $(DATA) "select * from c01"

TEST TL4 file tayloring - with data: URI template
#CALL Dbat -m taylor -s "$" -u data:%09$name%09$univ+$year%0a "select name, univ, year from c01"
CALL Dbat -m taylor -s "ß" -u "data:%09%c3%9fname%09in+%c3%9funiv+%c3%9fyear%0a" "select name, univ, year from c01"

TEST TL5 file tayloring from web uri
HTTP spec=test/taylor5&mode=taylor&sep={}

TEST TL6 file tayloring from file uri specified with -u
CALL Dbat -m taylor -s "{}" -u "web/spec/test/taylor.html" -f "web/spec/test/taylor5.xml"

TEST TL7 file tayloring from file uri specified in the spec file
HTTP spec=test/taylor5&mode=taylor&sep={}

#-------------------
# simple web table selection in various formats
TEST W01 select
HTTP spec=test/selec01

TEST W02 select as HTML
HTTP spec=test/selec01 mode=html

TEST W03 select as XML
HTTP spec=test/selec01 mode=xml

TEST W04 select for JDBC
HTTP spec=test/selec01 mode=jdbc

TEST W05 select tab separated
HTTP spec=test/selec01 mode=tsv

TEST W06 select fixed columns
HTTP spec=test/selec01 mode=fix

TEST W07 minimal HTML page
HTTP spec=test/minimal

TEST W09 echo SELECT SQL
HTTP spec=test/selec01 mode=echo

TEST W10 show default specification
HTTP spec=test/selec01 mode=spec

TEST W11 select as HTML
HTTP spec=test/selec01 mode=html

TEST W11E select as Excel-2007
HTTPZ spec=test/selec01 mode=xlsx

TEST W12 select with "." in specName
HTTP spec=test.selec01

TEST W13 select as Wiki text
HTTP spec=test/selec01 mode=wiki

TEST S13 select as Wiki text
CALL Dbat -m wiki  -f web/spec/test/selec02.xml

TEST W14 select as CSV, separator=semicolon
HTTP spec=test/includer&name=%r&mode=csv&sep=*

TEST S17 test <read> element in <col>
CALL Dbat -m html  -f web/spec/test/selec05.xml

TEST W17 test <read> element in <col>
HTTP spec=test/selec05
#-------------------
# describe table
TEST D01 describe table
CALL Dbat -d c01

TEST D02 describe table in HTML
CALL Dbat -m html -d c01

TEST D03 describe table in XML
CALL Dbat -m xml  -d c01

TEST D04 describe table in SQL
CALL Dbat -m sql  -d c01

TEST D05 describe table tab separated
CALL Dbat -m tsv  -d c01

TEST D06 describe table in fixed columns
CALL Dbat -m fix  -d c01

TEST D07 describe in MediaWiki format
CALL Dbat -m wiki -d c01

TEST D08 describe semicolon separated
CALL Dbat -m csv -s ";" -d c01

TEST D09 describe table in JDBC
CALL Dbat -m jdbc -d c01

TEST D10 output default specification
CALL Dbat -m spec -d c01

TEST D12 web describe with specification
HTTP spec=describe
#-------------------
# commandline table selection in various formats
TEST S02 select as HTML
CALL Dbat -m html -29  c01

TEST S03 select as XML
CALL Dbat -m xml  "select * from c01"

TEST S04 select for JDBC
CALL Dbat -m jdbc -29 c01

TEST S05 select tab separated
CALL Dbat -m tsv  -29 c01

TEST S06 select fixed columns
CALL Dbat -m fix  -29 c01

TEST S07 select fixed columns with widths
CALL Dbat -m fix -l 12,12,5,2,12 -29 c01

TEST S08 select semicolon separated
CALL Dbat -m csv -s ";" -29 c01

TEST S09 echo - show SELECT SQL only
CALL Dbat -m echo -29 c01

TEST E01 CLI echo - show SELECT SQL from XML file
CALL Dbat -m echo -f web/spec/test/selec01.xml

TEST E02 Web echo - show SQL WITH cte SELECT ...
HTTP spec=test/with_cte mode=echo

TEST E03 Web echo - 3 SELECTs
HTTP spec=test/listbox mode=echo

TEST S11 HTML format
CALL Dbat -m html -29 c01

TEST S11E Excel-2007 format
CALLZ Dbat -m xlsx -29 c01

TEST S12 select for SQL UPDATEs
CALL Dbat -m update -29 c01

TEST S14 select fixed columns with width truncation
CALL Dbat -m fix -l 4,4 "select name, len from b04"

TEST S15 select fixed columns with alignment
CALL Dbat -m fix -f web/spec/test/align02.xml

TEST S16 multiple tables, HTML format
CALL Dbat -m html -f web/spec/test/selec03.xml

TEST S16E multiple tables, Excel-2007 format
CALLZ Dbat -m xlsx -f web/spec/test/selec03.xml

TEST S21 select as HTML with linked values
CALL Dbat -m html -f web/spec/test/selec02.xml

TEST S22 select as XML  with linked values
CALL Dbat -m xml  -f web/spec/test/selec02.xml

TEST S23 select for JDBC with linked values
CALL Dbat -m jdbc -f web/spec/test/selec02.xml

TEST S24 select tab separated with linked values
CALL Dbat -m tsv  -f web/spec/test/selec02.xml

TEST S25 echo SELECT SQL with linked values
CALL Dbat -m echo -f web/spec/test/selec02.xml

TEST S26 select fixed columns with linked values
CALL Dbat -m fix  -f web/spec/test/selec02.xml

TEST S27 HTML format with linked values
CALL Dbat -m html  -f web/spec/test/selec02.xml

TEST S27E Excel-2007 format with linked values
CALLZ Dbat -m xlsx  -f web/spec/test/selec02.xml

TEST S28 select for SQL UPDATEs with linked values
CALL Dbat -m update -f web/spec/test/selec02.xml

#--------------------------
# tables sortable by the user
TEST SR1 sortable table - English
HTTP spec=test/color07 lang=en

TEST SR2 sortable table - Deutsch
HTTP spec=test/color07 lang=de
#--------------------------
TEST N01 count(*) test
CALL Dbat -n c01
#--------------------------
# enumerations, fetch into parameterMap
TEST EN1 create table with enumerations
DATA #
  drop table if exists en1;
  create table en1
  ( seq     INT not null
  , code    VARCHAR(16)
  , lang    CHAR(3)
  , display VARCHAR(64)
  ) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_bin;
  commit;
CALL Dbat -f $(DATA)

TEST EN2 fill table with enumerations
DATA #
  insert into en1 values( 1, 'M', 'eng', 'male');
  insert into en1 values( 2, 'F', 'eng', 'female');
  insert into en1 values( 3, 'N', 'eng', 'neuter');
  commit;
  select * from en1;
  commit;
CALL Dbat -f $(DATA)

TEST EN3 enumerations into parameters
HTTP spec=test/enum01

TEST EN4 enumerations into listbox
HTTP spec=test/enum02
#--------------------------
# aggregation, pivot and grouping
TEST C02 create pivot table
DATA #
  drop table if exists pivot ;
  create table pivot
  ( sp1 varchar(8)
  , sp2 varchar(8)
  , sp3 varchar(8)
  ) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_bin;
  commit;
CALL Dbat -f $(DATA)

TEST C03 CLI colors
CALL Dbat -m html -f web/spec/test/color04.xml

TEST C04 web colors
HTTP spec=test/color04

TEST C05  web colors, Wiki
HTTP spec=test/color04 mode=wiki

TEST C05E web colors, Excel-2007
HTTPZ spec=test/color04 mode=xlsx

TEST C06 CLI with column element (fails if MySQL does not know "||" concatenation)
CALL Dbat -m html -f web/spec/test/column02.xml

TEST C07 web with column element
HTTP spec=test/column02

TEST C08 web with colors on rows
HTTP spec=test/color08

TEST C09 web with class/style colors on columns and rows
HTTP spec=test/color09

TEST TI1 HTML title attribute - CLI
CALL Dbat -m html -f web/spec/test/highlight.xml -p keyword=ajax

TEST TI2 HTML title attribute - web
HTTP spec=test/highlight&keyword=ajax
#-------------------
# Fragment test
TEST FR1 fragment at the end of the URL
HTTP spec=test.color09 fragment= name=Johannes#block2
#-------------------
# Raw input tests (-r)
TEST R00 clear pivot table for raw input test
CALL Dbat "delete from pivot"

TEST R01 tsv raw table input test
# there must be 1 space before the tab
DATA --
 	c1	S1
 	c2	S2
 	c3	S3
 	c4	S4
 	c5 	S5
 A	c1	A1
 A	c2	A2
 A	c3	A3
 A	c4	A4
 A	c5	A5
 B	c1	B1
 B	c2	B2
 B	c3	B3
 B	c4	B4
 B	c5	B5
 C	c1	C1
 C	c2	C2
 C	c3	C3
 C	c4	C4
 C	c5	C5
 D	c1	D1
 D	c2	D2
 D	c3	D3
 D	c4	D4
 D	c5	D5
CALL Dbat -r pivot $(DATA)

TEST R02 check tsv input
CALL Dbat "select * from pivot order by 1,2,3;"

TEST R03 raw fix input
DATA --
 test    fix     0001
 test    fix     0002
 test    fix     0003
 test    fix     0004
CALL Dbat -l 8,8,4 -m fix -r pivot $(DATA)

TEST R04 check fix input
CALL Dbat "select * from pivot where sp2 = 'fix' order by 1,2,3;"

TEST R05 raw csv input
DATA --
 test;csv;0001
 test;csv;0002
 test;csv;0003
 test;csv;0004
CALL Dbat -s ";" -m csv -r pivot $(DATA)

TEST R06 check csv input
CALL Dbat "select * from pivot where sp2 = 'csv' order by 1,2,3;"

TEST R07 purge raw test data
CALL Dbat "delete from pivot where sp1 = 'test'"
#-------------------
# Grouping tests (-g)
TEST G01 CLI grouping test with TSV
CALL Dbat -g sp1 -m tsv  "select sp1, sp2      from pivot order by 1, 2"

TEST G02 CLI grouping test with HTML
CALL Dbat -g sp1 -m html "select sp1, sp2, sp3 from pivot order by 1, 2, 3"

TEST G03 web grouping test
HTTP spec=test/grouping

TEST G04 web grouping test with SQL (error in writeHeader)
HTTP spec=test/grouping mode=sql
#-------------------
TEST O01 Order + parm init
HTTP spec=test/order01

TEST O02 Order
HTTP spec=test/order02

TEST O03 Order probe
HTTP spec=test/order02 mode=probe
#-------------------
# Column aggregation
TEST AG1 aggregation test
CALL Dbat -a sp2 -sa "/" -m tsv  "select sp1, sp2 from pivot order by 1, 2"

TEST AG2 aggregation test with HTML
CALL Dbat -a sp2 -sa "+" -m html "select sp1, sp2 from pivot order by 1, 2"

TEST AG3 aggregation from spec
CALL Dbat -sa "; " -f web/spec/test/aggr01.xml

TEST AG4 Web aggregation test with HTML
HTTP spec=test.aggr01

TEST AG5 Web aggregation test with SQL
HTTP spec=test.aggr01 mode=sql

TEST AG6 Web aggregation test with fixed format
HTTP spec=test.aggr01 mode=fix

TEST AG7 Web aggregation test with TSV
HTTP spec=test.aggr01 mode=tsv

TEST AG8 Web aggregation test with XML
HTTP spec=test.aggr01 mode=xml

TEST AG8E Web aggregation test with Excel-2007 xlsx
HTTPZ spec=test.aggr01 mode=xlsx

TEST AG9 Web aggregation test with fetchLimit
HTTP spec=test.aggr01 fetch=3
#-------------------
# Pivot tables
TEST P03 aggregation test with HTML
CALL Dbat -a sp2 -sa "pivot" -m html "select sp1, sp2, sp3 from pivot order by 1, 2"

TEST P04 Web pivot test with html
HTTP spec=test/pivot03

TEST P05 Web pivot test with sql
HTTP spec=test/pivot03 mode=sql

TEST P06 Web pivot test with fix
HTTP spec=test/pivot03 mode=fix

TEST P07 Web pivot test with tsv
HTTP spec=test/pivot03 mode=tsv

TEST P08 Web pivot test with xml
HTTP spec=test/pivot03 mode=xml

TEST P08E Web pivot test with Excel-2007 xlsx
HTTPZ spec=test/pivot03 mode=xlsx

TEST P09 Web pivot test with fetchLimit
HTTP spec=test/pivot03 fetch=10

TEST P10 Web pivot test with jdbc
HTTP spec=test/pivot03 mode=jdbc

TEST P11 Web pivot test with json
HTTP spec=test/pivot03 mode=json

TEST P12 Web pivot test with wiki
HTTP spec=test/pivot03 mode=wiki
#-------------------
TEST TN1 specify table name in SQL INSERTs
CALL Dbat -m sql    -t tartable -4 "select * from c01"

TEST TN2 specify table name in SQL UPDATEs
CALL Dbat -m update -t tartable -4 "select * from c01"

TEST TN3 web select with table name
HTTP spec=test/xslt_brackets mode=jdbc
#-------------------
TEST PR1 probe correct SQL
CALL Dbat -m probe -f web/spec/test/selec02.xml

# TEST PR2 probe wrong SQL (WITH for MySQL)
# CALL Dbat -m probe -f web/spec/test/with_cte.xml
#-------------------
# Test different User-Agents for "view-source:" link feature in trailer

TEST UA1 Firefox - yes
REQUEST=User-Agent:Firefox/46
HTTP spec=test.pivot03

TEST UA2 Microsoft Edge - no
REQUEST=User-Agent:Edge/
HTTP spec=test.pivot03

TEST UA2D view-source: difference
DIFF test/UA1.this.tst test/UA2.this.tst

TEST UA3 Chrome - yes
REQUEST=User-Agent:Chrome/
HTTP spec=test.pivot03

TEST UA4 Opera - yes
REQUEST=User-Agent:OPR/
HTTP spec=test.pivot03

TEST UA5 Safari - no
REQUEST=User-Agent:Safari/
HTTP spec=test.pivot03

TEST UA6 - remove property
REQUEST=User-Agent:
HTTP spec=test.pivot03

#-------------------
TEST VS1 CLI visible grouping test with TSV
CALL Dbat -g sp1 -m tsv  -f web/spec/test/visible05.xml

TEST VS2 CLI visible grouping test with HTML
CALL Dbat -g sp1 -m html -f web/spec/test/visible05.xml

TEST VS3 Web visible grouping test
HTTP spec=test/visible05

TEST VS4 Web visible grouping test - sql
HTTP spec=test/visible05 mode=sql

TEST VS5 Web visible grouping test - jdbc
HTTP spec=test/visible05 mode=jdbc

TEST VS6 Web visible grouping test - update
HTTP spec=test/visible05 mode=update
#-------------------
TEST CH1 choose conditional compilation, "yes"
CALL Dbat -m csv -s "-" -p switch=yes -f web/spec/test/choose06.xml

TEST CH2 choose conditional compilation, "true"
CALL Dbat -m csv -s "-" -p switch=true -f web/spec/test/choose06.xml

TEST CH3 choose conditional compilation, "other"
CALL Dbat -m csv -s "-" -p switch=other -f web/spec/test/choose06.xml

TEST CH4 choose conditional compilation, numeric
HTTP spec=test/choose07 par=29

TEST CH5 choose conditional compilation, alphanumeric
HTTP spec=test/choose07 par=gf

TEST CH6 choose conditional compilation, non-word
HTTP spec=test/choose07 par=29-06
#-------------------
# table with foreign keys
TEST FK1 create tables with foreign keys
DATA #
    -- Foreign key example from MySQL 5 manual, slightly changed such that it
    -- runs through http://developer.mimer.se/validator/parser99/index.tml#parser
    -- @(#) $Id: all.tca 955 2012-06-05 07:22:59Z gfis $
    -- 2011-11-11, Dr. Georg Fischer
    -- SQL constraints
    DROP   TABLE if exists product_order;
    DROP   TABLE if exists product;
    CREATE TABLE product
            ( category  INT NOT NULL
            , id        CHAR(8) NOT NULL
            , price     DECIMAL
            , CONSTRAINT PK1 PRIMARY KEY(id, category)
            , CONSTRAINT UK2 UNIQUE     (id)
            ) Engine=InnoDB;
    DROP   TABLE if exists customer;
    CREATE TABLE customer
            ( id        CHAR(8) NOT NULL
            , PRIMARY KEY (id)
            ) Engine=InnoDB;

    CREATE TABLE product_order
            ( numb              INT NOT NULL
            , product_category  INT NOT NULL
            , product_id        CHAR(8) NOT NULL DEFAULT '00'
            , customer_id       CHAR(8) NOT NULL DEFAULT '17'
            , CONSTRAINT PK2 PRIMARY KEY(numb)
            , CONSTRAINT UK3 UNIQUE (product_id, product_category)
            , CONSTRAINT FK1 FOREIGN KEY (product_id, product_category)
                 REFERENCES product(id, category)
                     ON UPDATE CASCADE
                     ON DELETE RESTRICT,
                     CHECK (customer_id)
            , CONSTRAINT FK2 FOREIGN KEY (customer_id)
                 REFERENCES customer(id)
            ) Engine=InnoDB;

    COMMIT;
    CREATE INDEX prodnx ON product
            ( category  ASC
            );
    CREATE UNIQUE INDEX produx ON product
            ( id        DESC
            );
    COMMIT;
CALL Dbat -f $(DATA)

TEST FK2 describe with foreign keys
CALL Dbat -d product_order

TEST FK3 Web describe
HTTP spec=describe table=product_order
#-------------------
# SQL Views
TEST VW1 create view
DATA --
 create view vw1 as
    select name
    , birth
    from c01;
CALL Dbat -f $(DATA)

TEST VW2 describe view
CALL Dbat -d vw1

TEST VW4 drop view
DATA --
 drop view vw1;
CALL Dbat -f $(DATA)
#-------------------
# variants of the trailer line
TEST TR1 web trailer "none"
HTTP spec=test/trail01

TEST TR2 web trailer "out dbat"
HTTP spec=test/trail02

TEST TR3 web trailer "out dbat script"
HTTP spec=test/trail03

TEST TR4 web trailer "out dbat script xls"
HTTP spec=test/trail04

TEST TR5 web trailer "out dbat script xls more"
HTTP spec=test/trail05

TEST TR6 web trailer "out dbat more"
HTTP spec=test/trail06
#-------------------
# XSLT processing
TEST TS1 CLI XML+XSLT - basic function
CALL Dbat -m trans -f web/spec/test/xslt_brackets.xml -p xslt=web/spec/test/brackets.xsl

TEST TS2 CLI XSLT, but with mode=html - no transformation
CALL Dbat -m html -f web/spec/test/xslt_brackets.xml

TEST TS3 CLI XSLT with CLI parameter overriding attribute
CALL Dbat -m trans -f web/spec/test/xslt_brackets.xml  -p xslt=web/spec/test/formed.xsl

TEST TW1 Web XML+XSLT - basic function
HTTP spec=test.xslt_brackets mode=trans

TEST TW2 Web XSLT, but with mode=html - no transformation
HTTP spec=test.xslt_brackets mode=html

TEST TW3 Web XSLT with URL parameter overriding attribute
HTTP spec=test.xslt_brackets mode=trans xslt=/var/lib/tomcat/webapps/dbat/spec/test/formed.xsl
#-------------------
# 2nd layer: DBIV script generation and testing
TEST V01 create table for DBIV tests
DATA -- create table
  DROP TABLE if exists relatives;
  CREATE TABLE relatives
  ( name    VARCHAR(40) NOT NULL    COMMENT 'Christian Name'
  , family  varchar(40) not null    COMMENT 'Family Name'
  , birth   DATE
  , gender  CHAR(1)                 COMMENT 'M or F'
  , place   VARCHAR(40)             COMMENT 'Town'
  , decease int                     COMMENT 'Decease Year'
  , changed TIMESTAMP   -- DEFAULT NOW()
                                    COMMENT 'last update time'
  , user    VARCHAR(8)              COMMENT 'of last change'
  , PRIMARY KEY (name, family)
  ) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_bin;
  commit;
CALL Dbat -f $(DATA)

TEST V02 initial data for DBIV tests
DATA -- fill table
    DELETE FROM relatives;
    INSERT INTO relatives VALUES('Martha'   , 'Fischer' , '1909-11-17', 'F' , 'Freiburg'        , 1999, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Johannes' , 'Fischer' , '1911-06-03', 'M' , 'Schramberg'      , 1992, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Eberhard' , 'Fischer' , '1912-11-17', 'M' , 'Groß-Gerau'      , 1945, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Fritz'    , 'Fischer' , '1907-08-08', 'M' , 'Waldshut'        , 1995, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Maria'    , 'Ritter'  , '1914-09-17', 'F' , 'Hermsdorf'       , 1999, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Ilse'     , 'Ritter'  , '1909-02-09', 'F' , 'Lübars'          , 1983, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Dorothea' , 'Fischer' , '1910-02-07', 'F' , 'Berlin'          , 1985, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Lucie'    , 'Ritter'  , '1887-07-09', 'F' , 'Lübars'          , 1984, {ts'2012-06-28 19:47:06'}, 'testuser');
    COMMIT;
    SELECT * FROM relatives;
CALL Dbat -f $(DATA)

TEST V03 search for M
HTTP spec=test.crud03 view=sear search_name=M family=Ritter birth= gender=M place= decease=

TEST V04 update place of Maria
HTTP spec=test.crud03 search_value_1=M search_gender=' name=Maria family=Ritter view=upd

TEST V05 place updated
HTTP spec=test.crud03 view=upd2 search_name= search_family=Ritter name=Maria family=Ritter birth=1914-09-17 gender=F place=Berlin-Hermsdorf decease=1999 changed=current_timestamp user=testuser

TEST V06 insert with data of Maria
HTTP spec=test.crud03 view=ins search_name= family=Ritter birth=1914-09-17 gender=F place=Berlin-Hermsdorf decease=1999 changed=current_timestamp user=testuser

TEST V07 Teherba inserted
HTTP spec=test.crud03 view=ins2 search_name= search_family=Ritter name=Teherba family=Ritter birth=1886-02-04 gender=F place=Oranienburg decease=1968 changed=current_timestamp user=testuser

TEST V08 delete Teherba
HTTP spec=test.crud03 search_name= search_family=Ritter name=Teherba family=Ritter view=del

TEST V09 Teherba deleted
HTTP spec=test.crud03 view=del2 search_name= search_family=Ritter name=Teherba family=Ritter birth= gender=M place= decease=

TEST V10 Show dbiv in wiki format
HTTP spec=test.crud03&search_family=&birth=&search_name=&display=female&decease=&code=F&place=&user=&search_gender=&enc=ISO-8859-1&lang=en&mode=xml

TEST V11 Show dbiv in HTML format
HTTP spec=test.crud03&search_family=&birth=&search_name=&display=female&decease=&code=F&place=&user=&search_gender=&enc=ISO-8859-1&lang=en&mode=html

TEST V11E Show dbiv in Excel-2007 format
HTTPZ spec=test.crud03&search_family=&birth=&search_name=&display=female&decease=&code=F&place=&user=&search_gender=&enc=ISO-8859-1&lang=en&mode=xlsx

TEST V12 Show dbiv in fixed format
HTTP spec=test.crud03&search_family=&birth=&search_name=&display=female&decease=&code=F&place=&user=&search_gender=&enc=ISO-8859-1&lang=en&mode=fix

TEST V13 Show dbiv in separated format
HTTP spec=test.crud03&search_family=&birth=&search_name=&display=female&decease=&code=F&place=&user=&search_gender=&enc=ISO-8859-1&lang=en&mode=csv

TEST V14 Show dbiv in JSON format
HTTP spec=test.crud03&search_family=&birth=&search_name=&display=female&decease=&code=F&place=&user=&search_gender=&enc=ISO-8859-1&lang=en&mode=json

TEST V15 Show dbiv in SQL INSERT format
HTTP spec=test.crud03&search_family=&birth=&search_name=&display=female&decease=&code=F&place=&user=&search_gender=&enc=ISO-8859-1&lang=en&mode=sql

TEST V16 Show dbiv in SQL UPDATE format
HTTP spec=test.crud03&search_family=&birth=&search_name=&display=female&decease=&code=F&place=&user=&search_gender=&enc=ISO-8859-1&lang=en&mode=update
#-------------------
# Umlaut in URL
TEST UM1 Insert a record with umlaut key 
DATA -- add record
    INSERT INTO relatives VALUES('Cäcilie'   , 'Fischer' , '1919-11-17', 'F' , 'Coburg'        , 1999, {ts'2012-06-28 19:47:06'}, 'testuser');
    commit;
CALL Dbat -f $(DATA)

TEST UM2 search for Cäcilie
HTTP spec=test.uml01 view=sear search_name=Cäcilie

TEST UM3 search for URL-encoded C%C3%A4cilie
HTTP spec=test.uml01 view=sear search_name=C%C3%A4cilie

TEST UM4 delete record
CALL Dbat "delete from relatives where name like '%cilie'"
#-------------------
# repeat the V0* tests by directly calling *.iv.xml specifications
TEST VI2 initial data for DBIV tests
DATA -- fill table
    DELETE FROM relatives;
    INSERT INTO relatives VALUES('Martha'   , 'Fischer' , '1909-11-17', 'F' , 'Freiburg'        , 1999, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Johannes' , 'Fischer' , '1911-06-03', 'M' , 'Schramberg'      , 1992, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Eberhard' , 'Fischer' , '1912-11-17', 'M' , 'Groß-Gerau'      , 1945, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Fritz'    , 'Fischer' , '1907-08-08', 'M' , 'Waldshut'        , 1995, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Maria'    , 'Ritter'  , '1914-09-17', 'F' , 'Hermsdorf'       , 1999, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Ilse'     , 'Ritter'  , '1909-02-09', 'F' , 'Lübars'          , 1983, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Dorothea' , 'Fischer' , '1910-02-07', 'F' , 'Berlin'          , 1985, {ts'2012-06-28 19:47:06'}, 'testuser');
    INSERT INTO relatives VALUES('Lucie'    , 'Ritter'  , '1887-07-09', 'F' , 'Lübars'          , 1984, {ts'2012-06-28 19:47:06'}, 'testuser');
    COMMIT;
    SELECT * FROM relatives;
CALL Dbat -f $(DATA)

TEST VI3 search for M
HTTP spec=test.crud03.iv view=sear search_name=M family=Ritter birth= gender=M place= decease=
TEST VI3D precompiled = direct dbiv?
DIFF test/V03.prev.tst test/VI3.this.tst

TEST VI4 update place of Maria
HTTP spec=test.crud03.iv search_value_1=M search_gender=' name=Maria family=Ritter view=upd
TEST VI4D precompiled = direct dbiv?
DIFF test/V04.prev.tst test/VI4.this.tst

TEST VI5 place updated
HTTP spec=test.crud03.iv view=upd2 search_name= search_family=Ritter name=Maria family=Ritter birth=1914-09-17 gender=F place=Berlin-Hermsdorf decease=1999 changed=current_timestamp user=testuser
TEST VI5D precompiled = direct dbiv?
DIFF test/V05.prev.tst test/VI5.this.tst

TEST VI6 insert with data of Maria
HTTP spec=test.crud03.iv view=ins search_name= family=Ritter birth=1914-09-17 gender=F place=Berlin-Hermsdorf decease=1999 changed=current_timestamp user=testuser
TEST VI6D precompiled = direct dbiv?
DIFF test/V06.prev.tst test/VI6.this.tst

TEST VI7 Teherba inserted
HTTP spec=test.crud03.iv view=ins2 search_name= search_family=Ritter name=Teherba family=Ritter birth=1886-02-04 gender=F place=Oranienburg decease=1968 changed=current_timestamp user=testuser
TEST VI7D precompiled = direct dbiv?
DIFF test/V07.prev.tst test/VI7.this.tst

TEST VI8 delete Teherba
HTTP spec=test.crud03.iv search_name= search_family=Ritter name=Teherba family=Ritter view=del
TEST VI8D precompiled = direct dbiv?
DIFF test/V08.prev.tst test/VI8.this.tst

TEST VI9 Teherba deleted
HTTP spec=test.crud03.iv view=del2 search_name= search_family=Ritter name=Teherba family=Ritter birth= gender=M place= decease=
TEST VI9D precompiled = direct dbiv?
DIFF test/V09.prev.tst test/VI9.this.tst
#-------------------
# static SQL
TEST VA1 var element
HTTP spec=test.var01 name=%

TEST VA2 var elements with data types
HTTP spec=test.var02 name=M

TEST VA3 echo with var elements
HTTP spec=test.var02 mode=echo
#-------------------
