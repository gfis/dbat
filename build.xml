<?xml version="1.0" encoding="UTF-8" ?>
<!--
    ant-buildfile for commandline, web application and web service
    @(#) $Id$
    2016-09-16: Version 11: exactly 1 MANIFEST.MF
    2016-09-10: fill.lib
    2016-09-02: core.jar
    2014-11-11: tomcat.base|home extracted from build-import.xml
    2014-11-08: app.version=9
    2011-04-05: copy xtrans/XMLTransformer and associated classes
    2008-04-09: targets run.* renamed to test.*
    2007-02-16: use ant file build-import.xml
    2005-11-15: copied from checkdig
-->
<!--
 * Copyright 2006 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->
<project name="dbat" default="dist" basedir=".">
    <!-- the 5 needed for build-import.xml -->
    <property name="app.name"           value="Dbat" />
    <property name="app.version"        value="11" />
    <property name="app.main-class"     value="org.teherba.dbat.Dbat" />
    <property name="tomcat.base"        value="/var/lib/tomcat" />
    <property name="tomcat.home"        value="/usr/share/tomcat" />
    <import file="build-import.xml" />

    <property name="test"               value="%" />

    <target name="generate">
    </target>

    <target name="core.jar">
        <!-- without libraries, without web files -->
        <jar jarfile="${dist.home}/${ant.project.name}-core.jar"
                basedir="${build.classes}"
                manifest="${build.classes}/META-INF/MANIFEST.MF"
                excludes="web/** **/web/*.class **/format/*.class **/*Servlet.class **/xtrans/**"
                >
        </jar>
    </target>

    <target name="fill.lib">
        <copy todir="${lib.home}">
            <fileset dir="${tomcat.base}/openlib">
                <include name="activation.jar"                      />
            <!--
                <include name="common-core.jar"                     />
                <include name="log4j-1.2.17.jar"                    />
            -->
                <include name="commons-codec-1.10.jar"              />
                <include name="commons-fileupload-1.3.2.jar"        />
                <include name="commons-io-2.5.jar"                  />
                <include name="commons-logging-1.2.jar"             />
                <include name="log4j-api-2.17.1.jar"                />
                <include name="log4j-core-2.17.1.jar"               />
                <include name="mysql-connector-java-5.1.11-bin.jar" />
                <include name="poi-3.14-20160307.jar"               />
                <include name="poi-ooxml-3.14-20160307.jar"         />
                <include name="poi-ooxml-schemas-3.14-20160307.jar" />
                <include name="serializer.jar"                      />
                <include name="tomcat-dbcp.jar"                     />
                <include name="xmlbeans-2.6.0.jar"                  />
            </fileset>
        </copy>
        <delete failonerror="false" file="${lib.home}/common-core.jar" />
    </target>

    <target name="not_yet_generate">
    <!--
        generate content.xml and a fragment for web.xml from *.properties, as described in
        http://stackoverflow.com/questions/162079/how-to-merge-jsp-pre-compiled-web-xml-fragment-with-main-web-xml-using-ant
    -->
        <loadfile property="generated.web.xml.fragment" srcFile="${generated.fragment.file}" />
        <copy file="${orig-web-content.dir}/WEB-INF/web.xml" toFile="${generated-web-content.dir}/WEB-INF/web.xml">
            <filterset>
                <filter token="JDBC_MAP" value=" --&gt; ${generated.web.xml.fragment} &lt;!-- " />
            </filterset>
        </copy>
    </target>

    <target name="regression" depends="regression_mysql" /><!-- run a regression test -->
    <target name="regression_mysql">
        <java classname="org.teherba.common.RegressionTester" classpathref="compile.classpath" fork="true">
            <jvmarg value="-Djdk.net.registerGopherProtocol=true" /><!-- strange, but gopher is usually disabled because of a security problem -->
            <arg value="test/mysql.tests" />
            <arg value="${test}" />
        </java>
    </target>

    <target name="test" depends="deploy,test.command,test.servlet" />
    <target name="test.command"><!-- run the program from the commandline -->
        <antcall target="run">
            <param name="class" value="org.teherba.dbat.Dbat" />
            <param name="args"  value="-c worddb 'select count(*) from words'" />
        </antcall>
    </target>
    <target name="test.xml"><!-- run the program from the commandline -->
        <antcall target="run">
            <param name="class" value="org.teherba.dbat.Dbat" />
            <param name="args"  value="-c worddb -m xml -d words" />
        </antcall>
        <antcall target="run">
            <param name="class" value="org.teherba.dbat.Dbat" />
            <param name="args"  value="-c worddb -m xml -e ISO-8859-1 -i words" />
        </antcall>
    </target>
    <target name="test.servlet"><!-- call the web page -->
        <exec executable="lynx">
            <arg line="-dump http://localhost:8080/dbat/servlet?spec=spec1" />
        </exec>
    </target>

</project>
