<?xml version="1.0" encoding="UTF-8"?>
<!--
    Generates a Stored Procedure Stub for Dbat interactive views äöü
    @(#) $Id: dbiv_sproc.xsl 941 2012-05-22 17:05:49Z gfis $
    2012-04-17, Dr. Georg Fischer: copied from dbiv_spec.xsl
-->
<!--
 * Copyright 2012 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->
<xsl:stylesheet version="1.0"
        xmlns:xsl ="http://www.w3.org/1999/XSL/Transform"
        xmlns:iv  ="http://www.teherba.org/2011/dbiv"
        xmlns:db  ="http://www.teherba.org/2007/dbat"
        xmlns     ="http://www.teherba.org/2007/dbat"
        xmlns:ht  ="http://www.w3.org/1999/xhtml"
        xmlns:date="http://exslt.org/dates-and-times"
        xmlns:func="http://exslt.org/functions"
        xmlns:str ="http://exslt.org/strings"
        extension-element-prefixes="func date str"
        >
    <xsl:param name="prefix">fp_</xsl:param><!-- for formal parameter names -->
    <xsl:param name="delim"	>$</xsl:param><!-- procedure statement separator -->
    <xsl:param name="debug"	>true</xsl:param><!-- true or empty -->
    <xsl:param name="rdbms"	>mysql</xsl:param><!-- or db2, oracle ... -->
    <xsl:param name="sep"	></xsl:param><!-- or ";" -->
    <xsl:output method="text" encoding="UTF-8" />
    <xsl:strip-space elements="*"/>

    <xsl:variable name="spaces">
        <!-- 64 spaces for formatting: DO NOT REPLACE spaces in next line by tabs! -->
        <xsl:value-of select="'                                                                '" />
    </xsl:variable>

<xsl:template match="iv:dbiv">
	<!-- Transformation of the root element -->
    <!-- File header comment -->
    <xsl:value-of select="concat('--  Stored Procedure for ', @script, '.xml (äöü)&#10;')" />
    <xsl:value-of select="concat('--  @(#) $', 'Id$', '&#10;')" /><!-- CVS inserts timestamp here -->
    <xsl:value-of select="concat('--  Generated by dbat/etc/xslt/dbiv_sproc.xsl V1.1 at ', date:date-time(), '&#10;')" />
    <xsl:value-of select="concat('DROP   PROCEDURE ', /iv:dbiv/iv:view/@proc, ' ', $delim, '&#10;')" />
    <xsl:value-of select="concat('CREATE PROCEDURE ', /iv:dbiv/iv:view/@proc)" />
    <xsl:value-of select="concat('&#10;&#9;( IN&#9;'	, 'opcode                  CHAR(3)')" />
    
    <xsl:value-of select="concat('&#10;&#9;, OUT&#9;'	, 'sql_state               CHAR(5)')" />
    <xsl:value-of select="concat('&#10;&#9;, OUT&#9;'	, 'update_count            INT')" />
    
    <xsl:value-of select="concat('&#10;&#9;'	, '--')" />
	<xsl:for-each select="iv:view/iv:field[@type != 'action']">
	    <xsl:call-template name="formalParm">
	        <xsl:with-param name="field"  select="." />
		</xsl:call-template>
	</xsl:for-each>
    <xsl:value-of select='"&#10;&#9;)"' />
	<xsl:choose>
		<xsl:when test="$rdbms = 'db2zos'">
		    <xsl:text>
	 LANGUAGE SQL
	 DETERMINISTIC
	 WITH EXPLAIN
	 VALIDATE BIND
</xsl:text>
		</xsl:when>
		<xsl:when test="$rdbms = 'db2luw'">
		    <xsl:text>
	LANGUAGE SQL
	MODIFIES SQL DATA
</xsl:text>
		</xsl:when>
		<xsl:otherwise>
		</xsl:otherwise>
	</xsl:choose>
<!--
-->
    <xsl:value-of select='concat("&#10;BEGIN", "&#10;")' />
    <xsl:value-of select='concat("&#9;CASE opcode", "&#10;")' />
    <xsl:value-of select='concat("&#9;WHEN &apos;del&apos; THEN ", "&#10;")' />
    <xsl:call-template name="deleteBlock" />
    <xsl:value-of select='concat("&#9;&#9;", "&#10;")' />
    <xsl:value-of select='concat("&#9;WHEN &apos;ins&apos; THEN ", "&#10;")' />
    <xsl:call-template name="insertBlock" />
    <xsl:value-of select='concat("&#9;&#9;", "&#10;")' />
    <xsl:value-of select='concat("&#9;WHEN &apos;upd&apos; THEN ", "&#10;")' />
    <xsl:call-template name="updateBlock" />
    <xsl:value-of select='concat("&#9;&#9;", "&#10;")' />
    <xsl:value-of select='concat("&#9;END CASE;", "&#10;")' />
    <xsl:value-of select='concat("END", "&#10;", $delim, "&#10;")' />
</xsl:template>

<!--===========================================
	Auxiliary, callable templates
-->
<xsl:template name="formalParm">
	<!-- a line with a formal parameter -->
   	<xsl:param name="field" />
	<xsl:choose>
		<xsl:when test="string-length(iv:write) = 0 or (string-length(iv:write) != 0 and count(iv:write/descendant::*) != 0)">
		    <xsl:value-of select="concat('&#10;&#9;, IN&#9;', $prefix, $field/@name)" />
		    <xsl:value-of select="substring($spaces, 1, 21 - string-length($field/@name))" />
			<xsl:choose>
				<xsl:when test="$field/@type = 'date'">
				    <xsl:value-of select='"DATE"' />
				</xsl:when>
				<xsl:when test="$field/@type = 'int'">
				    <xsl:value-of select='"INT"' />
				</xsl:when>
				<xsl:when test="$field/@type = 'textarea'">
				    <xsl:value-of select='"CHAR"' />
			    	<xsl:value-of select='concat("(", $field/@size * $field/@rows, ")")' />
				</xsl:when>
				<xsl:when test="$field/@type = 'timestamp'">
				    <xsl:value-of select='"TIMESTAMP"' />
				</xsl:when>
				<xsl:otherwise>
				    <xsl:value-of select="translate($field/@type,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')" />
			    	<xsl:value-of select='concat("(", $field/@size, ")")' />
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="string-length($field/@key) &gt; 0">
				    <xsl:value-of select='concat(" -- key=", $field/@key)' />
				</xsl:when>
				<xsl:otherwise>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:when>
		<xsl:otherwise>
		</xsl:otherwise>
	</xsl:choose>
   	
   	<!-- formalParm -->
</xsl:template>

<xsl:template name="deleteBlock">
    <xsl:value-of select='concat("&#9;&#9;DELETE FROM ", /iv:dbiv/iv:view/@name)' />
    <xsl:call-template name="whereClause" />
    <xsl:value-of select='"&#10;&#9;&#9;;&#10;"' />
   	<!-- deleteBlock -->
</xsl:template>

<xsl:template name="insertBlock">
    <xsl:value-of select='concat("&#9;&#9;INSERT INTO ", /iv:dbiv/iv:view/@name, "&#10;&#9;&#9;( ")' />
   	<xsl:for-each select="/iv:dbiv/iv:view/iv:field[@type != 'action']">
       	<xsl:if test="position() &gt; 1">
            <xsl:value-of select='"&#10;&#9;&#9;, "' />
        </xsl:if>
        <xsl:value-of select='@name' />
  	</xsl:for-each>
    <xsl:value-of select='concat("&#10;&#9;&#9;)", " VALUES&#10;&#9;&#9;( ")' />
   	<xsl:for-each select="/iv:dbiv/iv:view/iv:field[@type != 'action']">
       	<xsl:if test="position() &gt; 1">
            <xsl:value-of select='"&#10;&#9;&#9;, "' />
        </xsl:if>
		<xsl:choose>
			<xsl:when test="string-length(iv:write) = 0 or (string-length(iv:write) != 0 and count(iv:write/descendant::*) != 0)">
		        <xsl:value-of select='concat($prefix, @name)' />
			</xsl:when>
			<xsl:otherwise>
		        <xsl:apply-templates match='iv:write' />
			</xsl:otherwise>
		</xsl:choose>
  	</xsl:for-each>
    <xsl:value-of select='"&#10;&#9;&#9;);&#10;"' />
   	<!-- insertBlock -->
</xsl:template>

<xsl:template name="updateBlock">
    <xsl:value-of select='concat("&#9;&#9;UPDATE ", /iv:dbiv/iv:view/@name, "&#10;&#9;&#9;  SET ")' />
   	<xsl:for-each select="/iv:dbiv/iv:view/iv:field[@type != 'action' and string-length(@key) = 0]">
       	<xsl:if test="position() &gt; 1">
            <xsl:value-of select='"&#10;&#9;&#9;    , "' />
        </xsl:if>
        <xsl:value-of select='concat(@name, substring($spaces, 1, 21 - string-length(@name)), " = ")' />
		<xsl:choose>
			<xsl:when test="string-length(iv:write) = 0 or (string-length(iv:write) != 0 and count(iv:write/descendant::*) != 0)">
		        <xsl:value-of select='concat($prefix, @name)' />
			</xsl:when>
			<xsl:otherwise>
		        <xsl:apply-templates match='iv:write' />
			</xsl:otherwise>
		</xsl:choose>
  	</xsl:for-each>
    <xsl:call-template name="whereClause" />
    <xsl:value-of select='"&#10;&#9;&#9;;&#10;"' />
   	<!-- updateBlock -->
</xsl:template>

<xsl:template name="whereClause">
	<xsl:value-of select='concat("&#10;&#9;&#9;", "WHERE ")' />
    <xsl:if test="string-length(/iv:dbiv/iv:view/iv:where) &gt; 0">
    	<xsl:value-of select="concat('(', /iv:dbiv/iv:view/iv:where, ') ')" />
    </xsl:if>
    <xsl:for-each select="/iv:dbiv/iv:view/iv:field[string-length(@key) &gt; 0]">
    	<xsl:if test="position() &gt; 1 or string-length(/iv:dbiv/iv:view/iv:where) &gt; 0">
	        <xsl:value-of select='"&#10;&#9;&#9;  AND "' />
        </xsl:if>
        <xsl:value-of select='concat(@name, substring($spaces, 1, 21 - string-length(@name)), " = ", $prefix, @name)' />
    </xsl:for-each>
	<!-- whereClause -->
</xsl:template>

</xsl:stylesheet>
