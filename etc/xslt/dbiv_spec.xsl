<?xml version="1.0" encoding="UTF-8"?>
<!--
    Generates a Dbat specification for an interactive view (C/R/U/D) äöü
    @(#) $Id: dbiv_spec.xsl 958 2012-06-06 06:02:39Z gfis $
    2012-06-25: without sql_state and update_count
    2012-06-21: <text label="..." /> generates 2 <ht:td /> elements; &#9; => &#32;&#x20;
    2012-06-06: '.' => '/' in dbiv/@script
    2012-06-05: wrap_xxx for field catalog
    2012-05-25: dat action; <text> rows in detail forms
    2012-05-21: disable SPR out parameters
    2012-05-15: $alter=0 disables alter functionality
    2012-04-24, major: apply-templates for iv:view; footer markup
    2012-04-23: onblur -> onkeyup
    2012-04-04: title, counter
    2012-03-15: pleasant indenting
    2012-03-06: new namespace dbiv
    2012-02-27, Dr. Georg Fischer
-->
<!--
 * Copyright 2012 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->
<xsl:stylesheet version="1.0"
        xmlns:xsl ="http://www.w3.org/1999/XSL/Transform"
        xmlns:iv  ="http://www.teherba.org/2011/dbiv"
        xmlns:db  ="http://www.teherba.org/2007/dbat"
        xmlns     ="http://www.teherba.org/2007/dbat"
        xmlns:ht  ="http://www.w3.org/1999/xhtml"
        xmlns:date="http://exslt.org/dates-and-times"
        xmlns:func="http://exslt.org/functions"
        xmlns:str ="http://exslt.org/strings"
        extension-element-prefixes="func date str"
        >
<!--==================================================
    Global variables and declarations 
-->
    <xsl:param name="lang"  >de</xsl:param><!-- language; default: de -->
    <xsl:param name="method">post</xsl:param><!-- post or get -->
    <xsl:param name="prefix">search_</xsl:param><!-- maybe uppercase -->
    <xsl:param name="debug" >true</xsl:param><!-- true or empty -->
    <xsl:param name="valid" >0</xsl:param><!-- or 1 = true -->
    <xsl:param name="alter" >1</xsl:param><!-- or 0 = false: do not enable any alter functionality -->
    <xsl:param name="rdbms" >mysql</xsl:param><!-- mysql, db2zos, db2luw, oracle ... -->
    <xsl:output method="xml" indent="yes" encoding="UTF-8" />
    <xsl:strip-space elements="*"/>
    <xsl:key name="fieldNameKey" match="iv:field" use="@name"/>
    <xsl:variable name="SP4" select='"    "' />

<xsl:template match="catalog"/>
    <xsl:template match="field">
    <xsl:variable name="shirtColor" select="@colorCode"/>
    <xsl:for-each select="$colorLookupDoc">
        <xsl:value-of select="key('colorNumKey',$shirtColor)"/>
    </xsl:for-each>
<!--
    <xsl:text> </xsl:text><xsl:apply-templates/><xsl:text>
</xsl:text>
-->
</xsl:template>

<!--==================================================
    Root Template
-->
<xsl:template match="iv:dbiv">
    <!-- Transformation of the root element -->
    <xsl:comment><!-- File header comment -->
        <xsl:value-of select="concat(@script, '.xml', ' äöü&#10;')" />
        <xsl:value-of select="concat('&#32;&#x20;@(#) $', 'Id$', '&#10;')" /><!-- CVS inserts timestamp here -->
        <xsl:value-of select="concat('&#32;&#x20;Generated by dbat/etc/xslt/dbiv_spec.xsl V1.3 at ', date:date-time(), '&#10;')" />
<!--
-->
        <xsl:value-of select="concat('&#32;&#x20;DO NOT EDIT HERE, but in ', @script, '.iv.xml instead!','&#10;')" />
    </xsl:comment>
    <dbat   xmlns     ="http://www.teherba.org/2007/dbat"
            xmlns:ht  ="http://www.w3.org/1999/xhtml"
            >
            <xsl:attribute name="encoding"  ><xsl:value-of select="@encoding"   /></xsl:attribute>
            <xsl:attribute name="conn"      ><xsl:value-of select="@conn"       /></xsl:attribute>
            <xsl:attribute name="lang"      ><xsl:value-of select="@lang"       /></xsl:attribute>
            <xsl:if test="count(iv:view/iv:field/iv:subquery) != 0">
            <xsl:attribute name="javascript"><xsl:value-of select='"http_request.js"' /></xsl:attribute>
            </xsl:if>
            <xsl:attribute name="title"     ><xsl:value-of select="translate(@script, '.', '/')" /></xsl:attribute>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
        <xsl:comment><xsl:text>
        param "view" takes the following values:
        sear - search form only
        del  - confirmation of deletion
        del2 - SQL DELETE + search form
        ins  - insert form
        ins2 - SQL INSERT + search form
        upd  - update form
        upd2 - SQL UPDATE + search form
    </xsl:text>
        </xsl:comment>
        
        <xsl:apply-templates select="iv:view" />
        <xsl:value-of select='"&#10;"' />
    </dbat>
</xsl:template>

<xsl:template match="iv:view">  
        <xsl:apply-templates select="./preceding-sibling::*" />
        <xsl:value-of select='"&#10;&#32;&#x20;"' />
        <xsl:apply-templates select="iv:title" />
        <xsl:value-of select='"&#10;"' />
        <xsl:if test="$alter != 0">
        <choose>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="sear">  
                <xsl:value-of select='"&#10;&#32;&#x20;"' />
            </when>
            <xsl:comment><xsl:text>== d e l ==============</xsl:text></xsl:comment>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="del">   
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <select limit="512">
                    <xsl:for-each select="iv:field[(string-length(@show) = 0 or @show != 'search')]">
                        <xsl:call-template name="wrap_resultColumn">
                            <xsl:with-param name="field"  select="." />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <from><xsl:value-of select="concat(@name, ' ', @id)" /></from>
                    <xsl:call-template name="whereClause">
                        <xsl:with-param name="view" select="." />
                        <xsl:with-param name="cond" select="'='" />
                    </xsl:call-template>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </select>
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <ht:form>
                    <xsl:attribute name="method"><xsl:value-of select="$method" /></xsl:attribute>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:input name="view"   type="hidden" value="del2" />
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:input name="opcode" type="hidden" value="del"  />
                    <xsl:for-each select="iv:field[string-length(@key) &gt; 0]">
                        <xsl:call-template name="wrap_hiddenSearchField">
                            <xsl:with-param name="field"  select="." />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:for-each select="iv:field">
                        <xsl:call-template name="wrap_hiddenField">
                            <xsl:with-param name="field"  select="." />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <xsl:choose>
                        <xsl:when test="../@lang = 'en'">
                            <ht:input type="submit" value="Delete" />
                        </xsl:when>
                        <xsl:when test="../@lang = 'de'">
                            <ht:input type="submit" value="L&amp;#xf6;schen" />
                        </xsl:when>
                    </xsl:choose>
                    <xsl:text> </xsl:text>
                    <xsl:call-template name="startOver" />
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </ht:form>    

                <xsl:value-of select='"&#10;&#32;&#x20;"' />
            </when>
            <xsl:comment><xsl:text>== d e l 2 ==============</xsl:text></xsl:comment>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="del2">  
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <xsl:choose>
                    <xsl:when test="string-length(@proc) &gt; 0">
                        <xsl:call-template name="callProcedure">
                            <xsl:with-param name="variant"  select="'del'" />
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <delete>
                            <from><xsl:value-of select="concat(@name, ' ')" /></from><!-- MySQL does not allow the @id here -->
                            <xsl:call-template name="whereClause">
                                <xsl:with-param name="view" select="." />
                                <xsl:with-param name="cond" select="'='" />
                            </xsl:call-template>
                            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                        </delete>
                    </xsl:otherwise>
                </xsl:choose>

                <xsl:call-template name="confirmModification">
                     <xsl:with-param name="variant"  select="'del'" />
                </xsl:call-template>
            </when>
            <xsl:comment><xsl:text>== d a t ==============</xsl:text></xsl:comment>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="dat">   
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <select into="parm">
                    <xsl:for-each select="iv:field[string-length(@key) = 0 and (string-length(@show) = 0 or @show != 'search')]">
                        <xsl:call-template name="wrap_resultColumn">
                            <xsl:with-param name="field"  select="." />
                            <xsl:with-param name="into"   select="'parm'" />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <from><xsl:value-of select="concat(@name, ' ', @id)" /></from>
                    <xsl:call-template name="whereClause">
                        <xsl:with-param name="view" select="." />
                        <xsl:with-param name="cond" select="'='" />
                    </xsl:call-template>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </select>
        
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <ht:form name="form1">
                    <xsl:attribute name="method"><xsl:value-of select="$method" /></xsl:attribute>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:table>
                        <xsl:for-each select="iv:field[(string-length(@show) = 0 or @show != 'search')]|iv:text">
                            <xsl:call-template name="wrap_inputField">
                                <xsl:with-param name="field"  select="." />
                                <xsl:with-param name="variant"  select="'dat'" />
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    </ht:table>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <xsl:call-template name="startOver" />
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </ht:form>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            </when>
            <xsl:comment><xsl:text>== i n s ==============</xsl:text></xsl:comment>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="ins">   
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <ht:h4>
                    <xsl:for-each select="iv:action[starts-with(@name, 'ins')]">
                        <xsl:value-of select='@label' />
                    </xsl:for-each>
                <!--
                    <xsl:choose>
                        <xsl:when test="../@lang = 'en'">
                            <xsl:text>Enter a new </xsl:text>
                            <xsl:call-template name="counterSingular" />
                        </xsl:when>
                        <xsl:when test="../@lang = 'de'">
                            <xsl:call-template name="counterSingular" />
                            <xsl:text> neu eintragen</xsl:text>
                        </xsl:when>
                    </xsl:choose>
                -->
                </ht:h4>
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <ht:form name="form1">
                    <xsl:attribute name="method"><xsl:value-of select="$method" /></xsl:attribute>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:input name="view"   type="hidden" value="ins2" />
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:input name="opcode" type="hidden" value="ins"  />
                    <xsl:for-each select="iv:field[string-length(@key) &gt; 0]">
                        <xsl:call-template name="wrap_hiddenSearchField">
                            <xsl:with-param name="field"  select="." />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:table>
                        <xsl:for-each select="iv:field[(string-length(@show) = 0 or @show != 'search')]|iv:text">
                            <xsl:call-template name="wrap_inputField">
                                <xsl:with-param name="field"    select="." />
                                <xsl:with-param name="variant"  select="'ins'" />
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    </ht:table>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <xsl:choose>
                        <xsl:when test="../@lang = 'en'"><ht:input type="submit" value="Save"       /></xsl:when>
                        <xsl:when test="../@lang = 'de'"><ht:input type="submit" value="Speichern"  /></xsl:when>
                    </xsl:choose>                   
                    <xsl:text> </xsl:text>
                    <xsl:call-template name="startOver" />
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </ht:form>
                <xsl:value-of select='"&#10;&#32;&#x20;"' />
            </when>
            <xsl:comment><xsl:text>== i n s 2 ==============</xsl:text></xsl:comment>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="ins2">  
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <xsl:choose>
                    <xsl:when test="string-length(@proc) &gt; 0">
                        <xsl:call-template name="callProcedure">
                            <xsl:with-param name="variant"  select="'ins'" />
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <insert><into><xsl:value-of select="@name" /></into>
                            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                            <values>
                                <xsl:for-each select="iv:field[(string-length(@show) = 0 or @show != 'search')]">
                                    <xsl:call-template name="wrap_writeColumn">
                                        <xsl:with-param name="field"  select="." />
                                    </xsl:call-template>
                                </xsl:for-each>
                                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                            </values>
                            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                        </insert>
                    </xsl:otherwise>
                </xsl:choose>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            </when>
            <xsl:comment><xsl:text>== u p d ==============</xsl:text></xsl:comment>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="upd">   
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <select into="parm">
                    <xsl:for-each select="iv:field[string-length(@key) = 0 and (string-length(@show) = 0 or @show != 'search')]">
                        <xsl:call-template name="wrap_resultColumn">
                            <xsl:with-param name="field"  select="." />
                            <xsl:with-param name="into"   select="'parm'" />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <from><xsl:value-of select="concat(@name, ' ', @id)" /></from>
                    <xsl:call-template name="whereClause">
                        <xsl:with-param name="view" select="." />
                        <xsl:with-param name="cond" select="'='" />
                    </xsl:call-template>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </select>
        
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <ht:h4>
                    <xsl:choose>
                        <xsl:when test="../@lang = 'en'">
                            <xsl:text>Update </xsl:text>
                            <xsl:call-template name="counterSingular" />
                        </xsl:when>
                        <xsl:when test="../@lang = 'de'">
                            <xsl:call-template name="counterSingular" />
                            <xsl:text> &amp;#xe4;ndern</xsl:text>
                        </xsl:when>
                    </xsl:choose>
                </ht:h4>
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <ht:form name="form1">
                    <xsl:attribute name="method"><xsl:value-of select="$method" /></xsl:attribute>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:input name="view"   type="hidden" value="upd2" />
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:input name="opcode" type="hidden" value="upd"  />
                    <xsl:for-each select="iv:field[string-length(@key) &gt; 0]">
                        <xsl:call-template name="wrap_hiddenSearchField">
                            <xsl:with-param name="field"  select="." />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:table>
                        <xsl:for-each select="iv:field[string-length(@key) &gt; 0]">
                            <xsl:call-template name="wrap_hiddenField">
                                <xsl:with-param name="field"  select="." />
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:for-each select="iv:field[(string-length(@show) = 0 or @show != 'search')]|iv:text">
                            <xsl:call-template name="wrap_inputField">
                                <xsl:with-param name="field"  select="." />
                                <xsl:with-param name="variant"  select="'upd'" />
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    </ht:table>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <xsl:choose>
                        <xsl:when test="../@lang = 'en'"><ht:input type="submit" value="Update" /></xsl:when>
                        <xsl:when test="../@lang = 'de'"><ht:input type="submit" value="&amp;#xc4;ndern" /></xsl:when>
                    </xsl:choose>
                    <xsl:text> </xsl:text>
                    <xsl:call-template name="startOver" />
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </ht:form>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            </when>
            <xsl:comment><xsl:text>== u p d 2 ==============</xsl:text></xsl:comment>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="upd2">  
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <xsl:choose>
                    <xsl:when test="string-length(@proc) &gt; 0">
                        <xsl:call-template name="callProcedure">
                            <xsl:with-param name="view"  select="'upd'" />
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <update><xsl:value-of select="@name" />
                            <xsl:for-each select="iv:field[string-length(@key) = 0 and (string-length(@show) = 0 or @show != 'search')]">
                                <xsl:call-template name="wrap_writeColumn">
                                    <xsl:with-param name="field"  select="." />
                                </xsl:call-template>
                            </xsl:for-each>
                            <xsl:call-template name="whereClause">
                                <xsl:with-param name="view" select="." />
                                <xsl:with-param name="cond" select="'='" />
                            </xsl:call-template>
                            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                        </update>
                    </xsl:otherwise>
                </xsl:choose>

                <xsl:call-template name="confirmModification">
                     <xsl:with-param name="variant"  select="'upd'" />
                </xsl:call-template>
            </when>
            <xsl:value-of select='"&#10;"' />
        </choose>
        </xsl:if>
        
        <xsl:value-of select='"&#10;"' />
        <xsl:comment><xsl:text>== s e a r  etc. ==============================</xsl:text></xsl:comment>
        <xsl:value-of select='"&#10;"' />  
        <choose>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="(sear|ins2|upd2|del2|)"> 
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />

                <xsl:if test="count(iv:action[@name = 'ins' and @position = 'first']) != 0"><!-- button for new entry form -->
                    <xsl:call-template name="insertButton" />
                </xsl:if>  

                <ht:form><!-- search form -->
                    <xsl:attribute name="method"><xsl:value-of select="$method" /></xsl:attribute>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:input name="view" type="hidden" value="sear"/>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <ht:table>
                        <xsl:for-each select="iv:field[string-length(@key) &gt; 0]">
                            <xsl:call-template name="wrap_inputField">
                                <xsl:with-param name="field"  select="." />
                                <xsl:with-param name="variant" select="'sear'" />
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    </ht:table>             
                    <xsl:for-each select="iv:field[string-length(@key) = 0]">
                        <xsl:call-template name="wrap_hiddenField">
                            <xsl:with-param name="field"  select="." />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <xsl:choose>
                        <xsl:when test="../@lang = 'en'"><ht:input type="submit" value="Search" /></xsl:when>
                        <xsl:when test="../@lang = 'de'"><ht:input type="submit" value="Suchen" /></xsl:when>
                    </xsl:choose>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </ht:form> 
                <ht:br />
                
                <xsl:if test="count(iv:action[@name = 'ins' and @position = 'middle']) != 0"><!-- button for new entry form -->
                    <xsl:call-template name="insertButton" />
                </xsl:if>  

                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' /><!-- table with search results -->
                <select limit="2048">
                    <xsl:for-each select="iv:action[(@name = 'dat' or @name = 'del' or @name = 'upd') and ($alter != 0 or @name = 'dat')]">
                        <xsl:call-template name="actionColumn">
                            <xsl:with-param name="action"  select="." />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:for-each select="iv:field[(string-length(@show) = 0 or @show != 'detail')]">
                        <xsl:call-template name="wrap_resultColumn">
                            <xsl:with-param name="field"  select="." />
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <from><xsl:value-of select="concat(@name, ' ', @id)" /></from>
                    <xsl:call-template name="whereClause">
                        <xsl:with-param name="view" select="." />
                        <xsl:with-param name="cond" select="'like'" />
                    </xsl:call-template>
                    <xsl:call-template name="orderClause" />
                    <xsl:call-template name="counterClause" />
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                </select>
                <xsl:value-of select='"&#10;&#32;&#x20;"' />

                <xsl:if test="count(iv:action[@name = 'ins' and @position = 'last']) != 0"><!-- button for new entry form -->
                    <xsl:call-template name="insertButton" />
                </xsl:if>  
                <!-- view="sear"-->
            </when>
            <xsl:value-of select='"&#10;&#32;&#x20;"' />
            <when name="view" match="(sear|)"> 
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
                <xsl:apply-templates select="./following-sibling::*" />
                <xsl:value-of select='"&#10;&#32;&#x20;"' />
            </when>
            <xsl:value-of select='"&#10;"' />
        </choose>
        <xsl:value-of select='"&#10;"' />
    <!-- iv:view -->
</xsl:template>

<!--===========================================
    Auxiliary, applicable templates (match=...)
-->
<xsl:template match="@*|node()">
    <xsl:copy>
        <xsl:apply-templates select="@*|node()" />
    </xsl:copy>
</xsl:template>

<xsl:template match="db:select|db:from|db:col|db:where|db:order">
    <xsl:copy>
        <xsl:apply-templates select="@*|node()" />
    </xsl:copy>
    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
</xsl:template>

<xsl:template match="db:*">
    <xsl:copy>
        <xsl:apply-templates select="@*|node()" />
    </xsl:copy>
</xsl:template>

<xsl:template match="ht:*">
    <xsl:copy>
        <xsl:apply-templates select="@*|node()" />
    </xsl:copy>
</xsl:template>

<xsl:template match="iv:select|db:select" mode="listbox">
    <db:select>
        <xsl:if test="string-length(@distinct) &gt; 0">
        <xsl:attribute name="distinct"  ><xsl:value-of select="@distinct"   /></xsl:attribute>
        </xsl:if>
        <xsl:if test="string-length(@into) &gt; 0">
        <xsl:attribute name="into"      ><xsl:value-of select="'parm'"      /></xsl:attribute>
        </xsl:if>
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
        <xsl:for-each select="./*">
            <xsl:copy>
                <xsl:apply-templates select="@*|node()" mode="listbox"/>
            </xsl:copy>
        </xsl:for-each>
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    </db:select>
</xsl:template>

<xsl:template match="@*|node()" mode="listbox">
    <xsl:copy>
        <xsl:apply-templates select="@*|node()" mode="listbox" />
    </xsl:copy>
</xsl:template>

<xsl:template match="iv:search">
    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    <ht:span >
        <ht:input type="button">
            <xsl:attribute name="value"     ><xsl:value-of select="@label"  /></xsl:attribute>
            <xsl:attribute name="onclick"   >
                <xsl:choose>
                    <xsl:when test="count(@link) != 0">
                        <xsl:value-of select='concat("location.href=&apos;servlet?spec=", @link, "&apos;")'  />
                    </xsl:when>
                    <xsl:when test="count(@href) != 0">
                        <xsl:value-of select='concat("location.href=&apos;"             , @href, "&apos;")'  />
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:comment><xsl:text>??? neither @link nor @href in subquery/search element</xsl:text></xsl:comment>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:for-each select="./iv:urlparm">
                    <xsl:apply-templates select="." />
                </xsl:for-each>
                <xsl:value-of select='";"'  />
            </xsl:attribute>
        </ht:input>
    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    </ht:span>
    <!-- iv:search -->
</xsl:template>

<xsl:template match="iv:subquery">
    <!-- onblur="ajaxRequest('test.ajax02' + '&amp;amp;family=' + this.form.family.value + '&amp;amp;name=' + this.form.name.value);" -->
    <xsl:attribute name="onblur">
        <xsl:value-of select='concat("ajaxRequest(&apos;", @link, "&apos;")'  />
        <xsl:for-each select="./*">
            <xsl:apply-templates select="." />
        </xsl:for-each>
        <xsl:value-of select='");"'  />
    </xsl:attribute>
    <!-- iv:subquery -->
</xsl:template>

<xsl:template match="iv:title">
    <xsl:value-of select='"&#10;&#32;&#x20;"' />
    <ht:h2>
        <xsl:apply-templates />
    </ht:h2>
    <!-- iv:title -->
</xsl:template>

<xsl:template match="iv:urlparm">
    <xsl:value-of select='concat(" + &apos;&amp;amp;", @name, "=&apos;")' />
    <xsl:choose>
        <xsl:when test="count(@field) != 0">
            <xsl:value-of select='concat(" + this.form.", @field, ".value")' /> 
        </xsl:when>
        <xsl:when test="count(@value) != 0">
            <xsl:value-of select='concat(" + &apos;", @value, "&apos;")' /> 
        </xsl:when>
        <xsl:otherwise>
            <xsl:comment><xsl:text>??? neither @field nor @value in subquery/search/urlparm element</xsl:text></xsl:comment>
        </xsl:otherwise>
    </xsl:choose>
    <!-- iv:urlparm -->
</xsl:template>

<!--===========================================
    Auxiliary, callable templates (name=...)
-->
<xsl:template name="actionColumn">
    <xsl:param name="action"    />
<!--generated dbat code:
    <col pseudo="image" label="Upd." align="center"
            link="test.crud02&amp;search_crit_1=&amp;search_crit_2=&amp;name=&amp;gender=&amp;view=" 
            >
        '<parm name="search_crit_1" />' || '=' 
        '<parm name="search_crit_2" />' || '=' 
        || name   || '='
        || gender || '='
        || 'upd'
    </col>
-->
    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    <col>
        <xsl:attribute name="pseudo"><xsl:value-of select="'image'"  /></xsl:attribute>
        <xsl:attribute name="label" ><xsl:value-of select="$action/@label"   /></xsl:attribute>
        <xsl:attribute name="align" ><xsl:value-of select="'center'" /></xsl:attribute>
        <xsl:if test="string-length($action/@remark) != 0">
        <xsl:attribute name="remark" ><xsl:value-of select="$action/@remark" /></xsl:attribute>
        </xsl:if>
        <xsl:attribute name="link"  >
            <xsl:choose>
                <xsl:when test="count(@link) != 0">
                    <xsl:value-of select='@link' /> 
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="/iv:dbiv/@script" />       
                </xsl:otherwise>
            </xsl:choose>
            <xsl:for-each select="/iv:dbiv/iv:view/iv:field[string-length(@key) &gt; 0]">
                <xsl:value-of select="'&amp;'" />
                <xsl:call-template name="wrap_searchFieldName">
                    <xsl:with-param name="field"  select="." />
                </xsl:call-template>
                <xsl:value-of select="'='" />
            </xsl:for-each>
            <xsl:for-each select="/iv:dbiv/iv:view/iv:field[string-length(@key) &gt; 0]">
                <xsl:value-of select="'&amp;'" />
                <xsl:call-template name="wrap_fieldName">
                    <xsl:with-param name="field"  select="." />
                </xsl:call-template>
                <xsl:value-of select="'='" />
            </xsl:for-each>
            <xsl:value-of select="concat('&amp;', 'view=')" />
        </xsl:attribute>
        <xsl:for-each select="/iv:dbiv/iv:view/iv:field[string-length(@key) &gt; 0]">
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
            <xsl:if test="position() &gt; 1">
                <xsl:text> || </xsl:text>
            </xsl:if>    
            <xsl:text>&apos;</xsl:text>
            <parm>
                <xsl:attribute name="name">
                    <xsl:call-template name="wrap_searchFieldName">
                        <xsl:with-param name="field"  select="." />
                    </xsl:call-template>
                </xsl:attribute>
            </parm>
            <xsl:value-of select='concat("&apos;", " || ", "&apos;=&apos; ")' />       
        </xsl:for-each>
        <xsl:for-each select="/iv:dbiv/iv:view/iv:field[string-length(@key) &gt; 0]">
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20; || "' />
            <xsl:call-template name="wrap_castToChar">
                <xsl:with-param name="field" select="." />
            </xsl:call-template>
            <xsl:value-of select='" || &apos;=&apos; "' />       
        </xsl:for-each>
        <xsl:value-of select='concat("|| &apos;", $action/@name, "&apos; ")' />
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    </col>
    <!-- actionColumn -->
</xsl:template>

<xsl:template name="callProcedure">
    <xsl:param name="variant" />

    <call into="parm"> 
        <xsl:attribute name="name"><xsl:value-of select="/iv:dbiv/iv:view/@proc" /></xsl:attribute> 
        <xsl:value-of  select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
        <col dir="in"  name="opcode" type="char" />
<!--        
        <xsl:value-of  select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
        <col dir="out" name="sql_state" type="char" />
        <xsl:value-of  select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
        <col dir="out" name="update_count" type="int" />
-->        
        <xsl:for-each  select="iv:field[(string-length(@show) = 0 or @show != 'search')]">
            <xsl:call-template name="wrap_callColumn">
                <xsl:with-param name="field" select="." />
            </xsl:call-template>
        </xsl:for-each>
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
    </call>
    <!-- callProcedure -->
</xsl:template>

<xsl:template name="confirmModification">
    <!-- tell the user the outcome of a modify operation -->
    <xsl:param name="variant" /><!-- 'del' or 'upd' -->

    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
    <ht:h4><parm name="update_count" />
        <xsl:choose>
            <xsl:when test="../@lang = 'en'"><xsl:text> row(s) for key</xsl:text></xsl:when>
            <xsl:when test="../@lang = 'de'"><xsl:text> Zeile(n) zu Schl&amp;#xfc;ssel</xsl:text></xsl:when>
        </xsl:choose>
        <xsl:text></xsl:text>
        <xsl:for-each select="iv:field[string-length(@key) &gt; 0]">
            <xsl:call-template name="wrap_headerField">
                <xsl:with-param name="field" select="." />
            </xsl:call-template>
        </xsl:for-each>
        
        <xsl:choose>
            <xsl:when test="$variant = 'del'">
                <xsl:choose>
                    <xsl:when test="../@lang = 'en'"><xsl:text> deleted</xsl:text></xsl:when>
                    <xsl:when test="../@lang = 'de'"><xsl:text> gel&amp;#xf6;scht</xsl:text></xsl:when>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="$variant = 'upd'">
                <xsl:choose>
                    <xsl:when test="../@lang = 'en'"><xsl:text> updated</xsl:text></xsl:when>
                    <xsl:when test="../@lang = 'de'"><xsl:text> ge&amp;#xe4;ndert</xsl:text></xsl:when>
                </xsl:choose>
            </xsl:when>
        </xsl:choose>
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
    </ht:h4>
    <xsl:value-of select='"&#10;&#32;&#x20;"' />
    <!-- confirmModification -->
</xsl:template>

<xsl:template name="insertButton">
    <!-- show a form with an insert button -->
    <xsl:if test="$alter != 0">
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
        <ht:form>
            <xsl:attribute name="method"><xsl:value-of select="$method" /></xsl:attribute>
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
            <ht:input name="view" type="hidden" value="ins"/>
            <xsl:for-each select="iv:field[string-length(@key) &gt; 0]">
                <xsl:call-template name="wrap_hiddenSearchField">
                    <xsl:with-param name="field" select="." />
                </xsl:call-template>
            </xsl:for-each>
            <xsl:for-each select="iv:field[string-length(@key) = 0]">
                <xsl:call-template name="wrap_hiddenField">
                    <xsl:with-param name="field"  select="." />
                </xsl:call-template>
            </xsl:for-each>
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
            <ht:input>
                <xsl:attribute name="type" ><xsl:value-of select="'submit'" /></xsl:attribute>
                <xsl:attribute name="value">
                    <xsl:for-each select="iv:action[starts-with(@name, 'ins') and @position != 'none']">
                        <xsl:value-of select='@label' />
                    </xsl:for-each>
                </xsl:attribute>
            </ht:input>
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;"' />
        </ht:form>  
    </xsl:if>
    <!-- insertButton -->
</xsl:template>

<xsl:template name="whereClause">
    <xsl:param name="view" /><!-- surrounding iv:view element -->
    <xsl:param name="cond" /><!-- 'like' or '=' -->
    
    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    <where>
        <xsl:if test="string-length($view/iv:where) &gt; 0">
            <xsl:value-of select="concat('(', $view/iv:where, ') ')" />
        </xsl:if>
        <xsl:for-each select="$view/iv:field[string-length(@key) &gt; 0]">
            <xsl:if test="position() &gt; 1 or string-length($view/iv:where) &gt; 0">
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;and "' />
            </xsl:if>
            <xsl:call-template name="wrap_whereColumn">
                <xsl:with-param name="field"  select="."     />
                <xsl:with-param name="cond"   select="$cond" />
            </xsl:call-template>
        </xsl:for-each>
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    </where>
    <!-- whereClause -->
</xsl:template>

<!--====================================================================
    Wrapper templates for the following which have a field as parameter:
    - if the field has a @name attribute, it is taken directly from the parameter
    - if the field has a @ref attribute instead of @name, it is looked up in the field catalog
-->
<xsl:template name="wrap_callColumn">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="callColumn">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="callColumn">
                    <xsl:with-param name="field"    select="$field"  />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_hiddenSearchField">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="hiddenSearchField">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                    <xsl:with-param name="init"     select="$field/@init" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="hiddenSearchField">
                    <xsl:with-param name="field"    select="$field"  />
                    <xsl:with-param name="init"     select="$field/@init" />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_hiddenField">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="hiddenField">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="hiddenField">
                    <xsl:with-param name="field"    select="$field"  />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_headerField">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="headerField">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="headerField">
                    <xsl:with-param name="field"    select="$field"  />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_searchFieldName">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="searchFieldName">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="searchFieldName">
                    <xsl:with-param name="field"    select="$field"  />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_fieldName">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="fieldName">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="fieldName">
                    <xsl:with-param name="field"    select="$field"  />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_inputField">
    <xsl:param name="field"  />
    <xsl:param name="variant" /><!-- ins, upd, sear -->                     

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="inputField">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                    <xsl:with-param name="key"      select="$field/@key" />
                    <xsl:with-param name="variant"  select="$variant" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="inputField">
                    <xsl:with-param name="field"    select="$field"  />
                    <xsl:with-param name="key"      select="$field/@key" />
                    <xsl:with-param name="variant"  select="$variant" />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_resultColumn">
    <xsl:param name="field" />
    <xsl:param name="into" select="''" /><!-- optional, non-empty string causes assignment to parameter in request map -->

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="resultColumn">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                    <xsl:with-param name="into"     select="$into" /><!-- optional, non-empty string causes assignment to parameter in request map -->
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="resultColumn">
                    <xsl:with-param name="field"    select="$field"  />
                    <xsl:with-param name="into"     select="$into" /><!-- optional, non-empty string causes assignment to parameter in request map -->
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_whereColumn">
    <xsl:param name="field" />
    <xsl:param name="cond"  />

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="whereColumn">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                    <xsl:with-param name="cond"     select="$cond" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="whereColumn">
                    <xsl:with-param name="field"    select="$field"  />
                    <xsl:with-param name="cond"     select="$cond" />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_writeColumn">
    <xsl:param name="field" />
    <!-- parm with optional quoting -->

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="writeColumn">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="writeColumn">
                    <xsl:with-param name="field"    select="$field"  />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="wrap_castToChar">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="string-length($field/@ref) != 0">
            <xsl:variable name="catalogFile" select="concat('../../web/spec/', substring-before(translate(/iv:dbiv/@script, '.', '/'), '/'), '/catalog.iv.xml')" />
            <xsl:for-each select="document($catalogFile)/iv:dbiv/iv:catalog">
                <xsl:call-template  name="castToChar">
                    <xsl:with-param name="field"    select="key('fieldNameKey', $field/@ref)" />
                </xsl:call-template>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
                <xsl:call-template  name="castToChar">
                    <xsl:with-param name="field"    select="$field"  />
                </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<!--=========================================
    Templates which have a field as parameter
    and which are called by the wrap_* templates
-->
<xsl:template name="callColumn">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="string-length($field/iv:write) = 0"><!-- without write -->
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
            <col>
                <xsl:attribute name="dir"   ><xsl:value-of select="'in'"    /></xsl:attribute> 
                <xsl:attribute name="name"  ><xsl:value-of select="$field/@name"    /></xsl:attribute>
                <xsl:attribute name="label" ><xsl:value-of select="$field/@label"   /></xsl:attribute>
                <xsl:attribute name="type"  ><xsl:value-of select="$field/@type"    /></xsl:attribute>
            </col>
        </xsl:when>
        <xsl:otherwise><!-- with write -->
            <xsl:choose>
                <xsl:when test="count($field/iv:write/descendant::*) != 0">
                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                    <col>
                        <xsl:attribute name="dir"   ><xsl:value-of select="'in'"    /></xsl:attribute> 
                        <xsl:attribute name="name"  ><xsl:value-of select="$field/@name"    /></xsl:attribute>
                        <xsl:attribute name="label" ><xsl:value-of select="$field/@label"   /></xsl:attribute>
                        <xsl:attribute name="type"  ><xsl:value-of select="$field/@type"    /></xsl:attribute>
                        <xsl:for-each select="$field/iv:write/child::node()">
                            <xsl:choose>
                                <xsl:when test="name(.) = 'parm'"><!-- embedded parameter element -->
                                    <parm>
                                        <xsl:attribute name="name"><xsl:value-of select="@name" /></xsl:attribute>
                                        <xsl:if test="string-length(@init) != 0">
                                        <xsl:attribute name="init"><xsl:value-of select="@init" /></xsl:attribute>
                                        </xsl:if>
                                    </parm>
                                </xsl:when>
                                <xsl:otherwise><!-- some text content -->
                                    <xsl:copy-of select="." />
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </col>
                </xsl:when>
                <xsl:otherwise>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:otherwise>
    </xsl:choose>
    <!-- callColumn -->
</xsl:template>

<xsl:template name="hiddenSearchField">
    <xsl:param name="field" />
    <xsl:param name="init"  />

    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    <ht:input>
        <xsl:attribute name="name">
            <xsl:call-template name="searchFieldName">
                <xsl:with-param name="field"  select="$field" />
            </xsl:call-template>
        </xsl:attribute>
        <xsl:attribute name="type"><xsl:value-of select="'hidden'"  /></xsl:attribute>
        <xsl:attribute name="init"><xsl:value-of select="$init"     /></xsl:attribute>
    </ht:input>
    <!-- hiddenSearchField -->
</xsl:template>

<xsl:template name="hiddenField">
    <xsl:param name="field" />

    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    <ht:input>
        <xsl:attribute name="name"><xsl:value-of select="$field/@name"  /></xsl:attribute>
        <xsl:attribute name="type"><xsl:value-of select="'hidden'"      /></xsl:attribute>
        <xsl:attribute name="init"><xsl:value-of select="$field/@init"  /></xsl:attribute>
    </ht:input>
    <!-- hiddenField -->
</xsl:template>

<xsl:template name="headerField">
    <xsl:param name="field" />

    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20; "' />
    <ht:em><xsl:text> </xsl:text>
        <parm>
            <xsl:attribute name="name"  ><xsl:value-of select="$field/@name" /></xsl:attribute>
        </parm>    
    </ht:em>
    <!-- headerField -->
</xsl:template>

<xsl:template name="searchFieldName">
    <xsl:param name="field" />
    <!-- generate the name of some search field -->
    
    <xsl:choose>
        <xsl:when test="$field/@name = translate($field/@name, 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')">
            <!-- is all uppercase: generate prefix "SEARCH_NAME" --> 
            <xsl:value-of select="concat(translate($prefix,  'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'), $field/@name)" />
        </xsl:when>
        <xsl:otherwise>
            <!-- contains some lowercase: take prefix "search_" unchanged --> 
            <xsl:value-of select="concat($prefix, $field/@name)" />
        </xsl:otherwise>
    </xsl:choose>
    <!-- searchFieldName -->
</xsl:template>

<xsl:template name="fieldName">
    <xsl:param name="field" />
    <!-- generate the name of some field -->
    
    <xsl:value-of select="$field/@name" />
    <!-- fieldName -->
</xsl:template>

<xsl:template name="inputField">
    <xsl:param name="field"  />
    <xsl:param name="key"    />
    <xsl:param name="variant" /><!-- ins, upd, sear -->                     
    <!-- a table row with the label and the value, either directly or in an HTML input or select element -->

    <xsl:variable name="nameAttr">
        <xsl:choose>
            <xsl:when test="$variant = 'sear'">
                <xsl:call-template name="searchFieldName">
                    <xsl:with-param name="field"  select="$field" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$field/@name" />
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    
    <xsl:choose>
        <xsl:when test="local-name($field) = 'text'">
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
            <ht:tr>
                <xsl:choose>
                    <xsl:when test="string-length($field/@label) != 0">
                        <ht:td><!-- optional first column with label -->
                            <xsl:if test="string-length($field/@id) != 0">
                            <xsl:attribute name="id"><xsl:value-of select="concat($field/@id, '0')" /></xsl:attribute>
                            </xsl:if>
                            <xsl:if test="string-length($field/@style) != 0">
                            <xsl:attribute name="class"><xsl:value-of select="$field/@style" /></xsl:attribute>
                            </xsl:if>
                            <xsl:value-of select="concat($field/@label, ':')" />
                        </ht:td>
                    </xsl:when>
                    <xsl:otherwise>
                    </xsl:otherwise>
                </xsl:choose>
                <ht:td>
                    <xsl:choose>
                        <xsl:when test="string-length($field/@label) != 0">
                            <xsl:if test="string-length($field/@id) != 0">
                            <xsl:attribute name="id"><xsl:value-of select="concat($field/@id, '1')" /></xsl:attribute>
                            </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="colspan"><xsl:value-of select='"2"' /></xsl:attribute>
                            <xsl:if test="string-length($field/@id) != 0">
                            <xsl:attribute name="id"><xsl:value-of select="concat($field/@id, '0')" /></xsl:attribute>
                            </xsl:if>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:if test="string-length($field/@align) != 0">
                    <xsl:attribute name="align"><xsl:value-of select="$field/@align" /></xsl:attribute>
                    </xsl:if>
                    <xsl:if test="string-length($field/@style) != 0">
                    <xsl:attribute name="class"><xsl:value-of select="$field/@style" /></xsl:attribute>
                    </xsl:if>
                    <xsl:apply-templates select="$field/node()" />
                </ht:td>
            </ht:tr>
        </xsl:when>
        <xsl:when test="string-length($field/@label) = 0">
            <!-- do not emit this row if there is no label -->
        </xsl:when>
        <xsl:otherwise><!-- a row for the field -->
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
            <ht:tr>
                <ht:td valign="top">
                    <xsl:attribute name="title"><xsl:value-of select="$field/@name" /></xsl:attribute>
                    <xsl:if test="string-length($field/@style) != 0">
                    <xsl:attribute name="class"><xsl:value-of select="$field/@style" /></xsl:attribute>
                    </xsl:if>
                    <xsl:if test="string-length($field/@id) != 0">
                    <xsl:attribute name="id"><xsl:value-of select="concat($field/@id, '0')" /></xsl:attribute>
                    </xsl:if>
                    <xsl:value-of select="concat($field/@label, ':')" />
                </ht:td>
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                <ht:td>
                    <xsl:if test="string-length($field/@style) != 0">
                    <xsl:attribute name="class"><xsl:value-of select="$field/@style" /></xsl:attribute>
                    </xsl:if>
                    <xsl:if test="string-length($field/@id) != 0">
                    <xsl:attribute name="id"><xsl:value-of select="concat($field/@id, '1')" /></xsl:attribute>
                    </xsl:if>
                <xsl:choose>
                    <xsl:when test="($variant = 'upd' and string-length($key) &gt; 0) or (string-length($field/@valid) = 0) or ($variant = 'dat') ">
                        <!-- show the value, but it's not possible to modify it -->
                        <parm>
                            <xsl:attribute name="name"      ><xsl:value-of select="$field/@name"    /></xsl:attribute>
                        </parm>
                    </xsl:when>
                    <xsl:otherwise><!-- value + modification (input or select element) -->
                        <xsl:choose>
                            <xsl:when test="count($field/iv:enumeration) &gt; 0"><!-- enum, HTML select -->
                                <ht:select>
                                    <xsl:attribute name="name"      ><xsl:value-of select="$nameAttr"       /></xsl:attribute>
                                    <xsl:attribute name="init"      ><xsl:value-of select="$field/@init"    /></xsl:attribute>
                                <!--valid
                                    <xsl:attribute name="valid"     ><xsl:value-of select="$field/@valid"   /></xsl:attribute>
                                -->
                                    <xsl:if test="string-length($field/iv:enumeration/@multiple) &gt; 0">
                                        <xsl:attribute name="multiple"  >
                                            <xsl:value-of select="$field/iv:enumeration/@multiple"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="string-length($field/@id) != 0">
                                    <xsl:attribute name="id"><xsl:value-of select="concat($field/@id, '2')" /></xsl:attribute>
                                    </xsl:if>
                                    <xsl:choose>
                                        <xsl:when test="$variant = 'sear'">
                                            <xsl:attribute name="size"      >
                                                <xsl:value-of select="$field/iv:enumeration/@height + 1"    />
                                            </xsl:attribute>
                                            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                                            <ht:option>
                                                <xsl:attribute name="value"     ></xsl:attribute>
                                                <xsl:choose>
                                                    <xsl:when test="/iv:dbiv/@lang = 'en'"><xsl:text>(any)</xsl:text></xsl:when>
                                                    <xsl:when test="/iv:dbiv/@lang = 'de'"><xsl:text>(alle)</xsl:text></xsl:when>
                                                </xsl:choose>
                                            </ht:option>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="size"><xsl:value-of select="$field/iv:enumeration/@height" /></xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:for-each select="$field/iv:enumeration/iv:enum[@lang = /iv:dbiv/@lang]">
                                        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                                        <ht:option>
                                            <xsl:attribute name="value"     ><xsl:value-of select="@code"   /></xsl:attribute>
                                            <xsl:if test="$field/@init = @code">
                                            <xsl:attribute name="selected"  ><xsl:value-of select="'true'"  /></xsl:attribute>
                                            </xsl:if>
                                            <xsl:value-of select="@display" />
                                        </ht:option>
                                    </xsl:for-each>
                                    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                                </ht:select>
                                <!-- enum, HTML select -->
                            </xsl:when>
                            <xsl:when test="count($field/iv:listbox) &gt; 0">
                                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                                <xsl:apply-templates select="$field/iv:listbox/db:select|$field/iv:listbox/iv:select" mode="listbox"/>
                                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                                <db:listbox>
                                    <xsl:attribute name="height"        ><xsl:value-of select="$field/iv:listbox/@height"   /></xsl:attribute>
                                    <xsl:choose>
                                        <xsl:when test="$variant = 'sear'">
                                            <xsl:attribute name="name"  >
                                                <xsl:call-template name="searchFieldName">
                                                    <xsl:with-param name="field"  select="$field" />
                                                </xsl:call-template>
                                            </xsl:attribute>
                                            <xsl:attribute name="init"  ></xsl:attribute>
                                            <xsl:attribute name="empty" >
                                                <xsl:choose>
                                                    <xsl:when test="/iv:dbiv/@lang = 'en'"><xsl:text>(any)</xsl:text></xsl:when>
                                                    <xsl:when test="/iv:dbiv/@lang = 'de'"><xsl:text>(alle)</xsl:text></xsl:when>
                                                </xsl:choose>
                                            </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="name"  ><xsl:value-of select="$field/@name"    /></xsl:attribute>
                                            <xsl:attribute name="init"  ><xsl:value-of select="$field/@init"    /></xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:attribute name="code"      ><xsl:value-of select="'code'"          /></xsl:attribute>
                                    <xsl:attribute name="display"   ><xsl:value-of select="'display'"       /></xsl:attribute>
                                </db:listbox>
                                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                            </xsl:when>
                            <xsl:when test="$field/@type = 'textarea'">
                                <ht:textarea>
                                    <xsl:attribute name="name"      ><xsl:value-of select="$nameAttr"       /></xsl:attribute>
                                    <xsl:attribute name="cols"      ><xsl:value-of select="$field/@size"    /></xsl:attribute>
                                    <xsl:attribute name="rows"      ><xsl:value-of select="$field/@rows"    /></xsl:attribute>
                                    <xsl:attribute name="init"      ><xsl:value-of select="$field/@init"    /></xsl:attribute>
                                    <xsl:if test="string-length($field/@id) != 0">
                                    <xsl:attribute name="id"><xsl:value-of select="concat($field/@id, '2')" /></xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="string-length($field/@valid) &gt; 0">
                                        <xsl:attribute name="title"     ><xsl:value-of select="$field/@valid"   /></xsl:attribute>
                                <!--valid
                                        <xsl:attribute name="valid"     >
                                            <xsl:value-of select="$field/@valid"    />
                                        </xsl:attribute>
                                -->
                                        <xsl:attribute name="onkeyup"       >
                                            <xsl:value-of select='concat("this.form.", $field/@name, ".className = ")' /> 
                                            <xsl:value-of select='concat("(this.form.", $field/@name, ".value.match(&apos;^")' />
                                            <xsl:value-of select='concat(str:replace($field/@valid, "\", "\\") , "$&apos;)) ")' /> 
                                            <xsl:value-of select='concat("? &apos;valid&apos;", ": &apos;invalid&apos;")' /> 
                                        </xsl:attribute>
                                    </xsl:if>
                                </ht:textarea>
                                <xsl:value-of select='concat(" ", $field/@remark)' />
                                <!-- not enum, HTML textarea -->
                            </xsl:when>
                            <xsl:otherwise><!-- not enum, HTML input -->
                                <ht:input>
                                    <xsl:attribute name="name"      ><xsl:value-of select="$nameAttr"       /></xsl:attribute>
                                    <xsl:attribute name="size"      ><xsl:value-of select="$field/@size"    /></xsl:attribute>
                                    <xsl:attribute name="init"      ><xsl:value-of select="$field/@init"    /></xsl:attribute>
                                    <xsl:if test="string-length($field/@id) != 0">
                                        <xsl:attribute name="id"><xsl:value-of select="concat($field/@id, '2')" /></xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="count($field/@valid) &gt; 0">
                                        <xsl:attribute name="title"     ><xsl:value-of select="$field/@valid"   /></xsl:attribute>
                                    <!--valid
                                        <xsl:attribute name="valid"     >
                                            <xsl:value-of select="$field/@valid"    />
                                        </xsl:attribute>
                                    -->
                                        <xsl:attribute name="onkeyup"       >
                                            <xsl:value-of select='concat("this.form.", $field/@name, ".className = ")' /> 
                                            <xsl:value-of select='concat("(this.form.", $field/@name, ".value.match(&apos;^")'  />
                                            <xsl:value-of select='concat(str:replace($field/@valid, "\", "\\") , "$&apos;)) ")' /> 
                                            <xsl:value-of select='concat("? &apos;valid&apos;", ": &apos;invalid&apos;")' /> 
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:for-each select="$field/iv:subquery">
                                        <xsl:apply-templates select="." />
                                    </xsl:for-each>
                                </ht:input>
                                <xsl:if test="string-length($field/@remark) != 0">
                                    <xsl:value-of select='concat(" ", $field/@remark)' />
                                </xsl:if>
                                <xsl:for-each select="$field/iv:search">
                                    <xsl:apply-templates select="." />
                                </xsl:for-each>
                                <!-- not enum, HTML input -->
                            </xsl:otherwise>
                        </xsl:choose>
                        <!-- value + modification (input or select element) -->
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
                </ht:td>
            </ht:tr>
            <!-- a row for the field -->
        </xsl:otherwise>
    </xsl:choose>
    <!-- inputField -->
</xsl:template>

<xsl:template name="resultColumn">
    <xsl:param name="field" />
    <xsl:param name="into" select="''" /><!-- optional, non-empty string causes assignment to parameter in request map -->
    <!--Generates an ordinary col element for the result HTML table.
        Special processing is done for types "listbox" and "enum".
    -->

    <xsl:choose>
        <xsl:when test="string-length($field/@label) = 0">
            <!-- do not show fields which have no label -->
        </xsl:when>
        <xsl:otherwise><!-- field with elementary datatype or enum -->
            <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
            <col>
                <xsl:attribute name="name"  ><xsl:value-of select="$field/@name"    /></xsl:attribute>
                <xsl:attribute name="label" ><xsl:value-of select="$field/@label"   /></xsl:attribute>
                <xsl:if test="$field/@align != 'left'">
                <xsl:attribute name="align" ><xsl:value-of select="$field/@align"   /></xsl:attribute>
                </xsl:if>
                <xsl:if test="string-length($field/@link) != 0">
                <xsl:attribute name="link"  ><xsl:value-of select="$field/@link"    /></xsl:attribute>
                </xsl:if>
                <xsl:if test="string-length($field/@href) != 0">
                <xsl:attribute name="href"  ><xsl:value-of select="$field/@href"    /></xsl:attribute>
                </xsl:if>
                <xsl:if test="string-length($field/@style) != 0">
                <xsl:attribute name="style" ><xsl:value-of select="$field/@style"   /></xsl:attribute>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test="count($field/iv:enumeration) &gt; 0">
                        <xsl:choose>
                            <xsl:when test="false and string-length($into) = 0">
                                <xsl:value-of select="concat('case', ' ')" />
                                <xsl:for-each select="$field/iv:enumeration/iv:enum[@lang = /iv:dbiv/@lang]">
                                    <xsl:value-of select='concat("&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;when ", $field/@name)' />
                                    <xsl:value-of select='concat(" = &apos;", @code , "&apos; then &apos;", @display, "&apos;")' />
                                </xsl:for-each>
                                <xsl:value-of select='concat("&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;else ", $field/@name, " end")' />
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$field/@name" />
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="count($field/iv:listbox) &gt; 0">
                        <xsl:choose>
                            <xsl:when test="false and string-length($into) = 0">
                                <xsl:value-of select="concat('case', ' ')" />
                                <xsl:for-each select="$field/iv:enumeration/iv:enum[@lang = /iv:dbiv/@lang]">
                                    <xsl:value-of select='concat("&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;when ", $field/@name)' />
                                    <xsl:value-of select='concat(" = &apos;", @code , "&apos; then &apos;", @display, "&apos;")' />
                                </xsl:for-each>
                                <xsl:value-of select='concat("&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;else ", $field/@name, " end")' />
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$field/@name" />
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="count($field/iv:read) &gt; 0">
                        <xsl:value-of select="$field/iv:read" />
                    </xsl:when>
                    <xsl:otherwise><!-- field with elementary datatype -->
                        <xsl:value-of select='concat("&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;&#32;&#x20;", normalize-space($field/@name))' />
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
            </col>
        </xsl:otherwise>
    </xsl:choose>
    <!-- resultColumn -->
</xsl:template>

<xsl:template name="whereColumn">
    <xsl:param name="field" />
    <xsl:param name="cond"  />

    <xsl:choose>
        <xsl:when test="$cond = '='">
            <xsl:choose>
                <xsl:when test="$field/@type = 'int'">
                    <xsl:value-of select='concat($field/@name, " ", $cond, " ")' />
                    <parm>
                        <xsl:attribute name="name"><xsl:value-of select="$field/@name" /></xsl:attribute>
                    </parm>  
                </xsl:when>
                <xsl:otherwise><!-- @type = 'char', enum, timestamp etc. -->
                    <xsl:value-of select='concat($field/@name, " ", $cond, " ")' />
                    <xsl:text>&apos;</xsl:text>
                    <parm>
                        <xsl:attribute name="name"><xsl:value-of select="$field/@name" /></xsl:attribute>
                    </parm>  
                    <xsl:text>&apos;</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:when>
        <xsl:when test="$cond = 'like'">
            <xsl:choose>
                <xsl:when test="$field/@type = 'impossible'">
                    <xsl:value-of select='concat($field/@name, " = ", @name)' />
                </xsl:when>
                <xsl:otherwise><!-- $field/@type = 'char', enum, timestamp etc. -->
                    <xsl:call-template name="castToChar">
                        <xsl:with-param name="field" select="$field" />
                    </xsl:call-template>
                    <xsl:value-of select='concat(" ", $cond, " ")' />
                    <xsl:text>&apos;</xsl:text>
                    <parm>
                        <xsl:attribute name="name">
                            <xsl:call-template name="searchFieldName">
                                <xsl:with-param name="field"  select="$field" />
                            </xsl:call-template>
                        </xsl:attribute>
                    </parm>  
                    <xsl:value-of select='"%"' />
                    <xsl:text>&apos;</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="concat('wrong parameter ', $cond, ' for template whereColumn')" />
        </xsl:otherwise>
    </xsl:choose>
    <!-- whereColumn -->
</xsl:template>

<xsl:template name="writeColumn">
    <xsl:param name="field" />
    <!-- parm with optional quoting -->

    <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
    <col>
        <xsl:if test="string-length(/iv:dbiv/iv:view/@proc) &gt; 0">
            <xsl:attribute name="dir"><xsl:value-of select="'in'" /></xsl:attribute> 
        </xsl:if>
        <xsl:attribute name="name"><xsl:value-of select="$field/@name" /></xsl:attribute>
        <xsl:choose>
            <xsl:when test="string-length($field/iv:write) != 0">
                <xsl:for-each select="$field/iv:write/child::node()">
                    <xsl:choose>
                        <xsl:when test="name(.) = 'parm'"><!-- embedded parameter element -->
                            <parm>
                                <xsl:attribute name="name"><xsl:value-of select="@name" /></xsl:attribute>
                                <xsl:if test="string-length(@init) != 0">
                                <xsl:attribute name="init"><xsl:value-of select="@init" /></xsl:attribute>
                                </xsl:if>
                                <xsl:if test="string-length($field/@valid) != 0 and $valid != 0">
                                <xsl:attribute name="valid" ><xsl:value-of select="$field/@valid" /></xsl:attribute>
                                </xsl:if>
                            </parm>
                        </xsl:when>
                        <xsl:otherwise><!-- some text content -->
                            <xsl:copy-of select="." />
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$field/@type = 'int'">
                        <parm>
                            <xsl:attribute name="name"  ><xsl:value-of select="$field/@name"  /></xsl:attribute>
                            <xsl:if test="string-length($field/@valid) != 0 and $valid != 0">
                            <xsl:attribute name="valid" ><xsl:value-of select="$field/@valid" /></xsl:attribute>
                            </xsl:if>
                        </parm>
                    </xsl:when>
                    <xsl:when test="$field/@type = 'timestamp'">
                        <parm>
                            <xsl:attribute name="name"  ><xsl:value-of select="$field/@name" /></xsl:attribute>
                            <xsl:if test="string-length($field/@valid) != 0 and $valid != 0">
                            <xsl:attribute name="valid" ><xsl:value-of select="$field/@valid" /></xsl:attribute>
                            </xsl:if>
                        </parm>
                    </xsl:when>
                    <xsl:otherwise><!-- char etc. in apos -->
                        <xsl:text>'</xsl:text>
                        <parm>
                            <xsl:attribute name="name"  ><xsl:value-of select="$field/@name" /></xsl:attribute>
                            <xsl:if test="string-length($field/@valid) != 0 and $valid != 0">
                            <xsl:attribute name="valid" ><xsl:value-of select="$field/@valid" /></xsl:attribute>
                            </xsl:if>
                        </parm>
                        <xsl:text>'</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </col>
    <!-- writeColumn -->
</xsl:template>

<xsl:template name="castToChar">
    <xsl:param name="field" />

    <xsl:choose>
        <xsl:when test="$field/@type != 'char'">
            <xsl:choose>
                <xsl:when test="$rdbms = 'mysql'">
                    <xsl:value-of select='concat("CAST(", $field/@name, " AS CHAR(", $field/@size, "))")' />       
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select='concat("CHAR(", $field/@name, ")")' />       
                </xsl:otherwise>
            </xsl:choose>
        </xsl:when>
        <xsl:otherwise><!-- is already a CHAR datatype -->
            <xsl:value-of select='$field/@name' />       
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<!--=======================================
    Templates which do not depend on fields
-->
<xsl:template name="titleClause">
    <xsl:value-of select='"&#10;&#32;&#x20;"' />
    <comment>
    <xsl:value-of select='string(/iv:dbiv/iv:view/iv:title)' />
    <xsl:value-of select='"&#10;&#32;&#x20;"' />
    </comment>

    <xsl:for-each select="/iv:dbiv/iv:view/iv:title">
        <xsl:value-of select='"&#10;&#32;&#x20;"' />
        <ht:h2>
            <xsl:copy-of select="node()" />
        </ht:h2>
    </xsl:for-each>
    <!-- title -->
</xsl:template>

<xsl:template name="startOver">
    <!-- output link "Back to the search form" -->
    <ht:a>
        <xsl:attribute name="href">
            <xsl:value-of select='concat("servlet?spec=", /iv:dbiv/@script)' />
        </xsl:attribute>
        <xsl:choose>
            <xsl:when test="/iv:dbiv/@lang = 'en'"><xsl:text>Back</xsl:text></xsl:when>
            <xsl:when test="/iv:dbiv/@lang = 'de'"><xsl:text>Zur&amp;#xfc;ck</xsl:text></xsl:when>
        </xsl:choose>
    </ht:a>                                                
    <xsl:choose>
            <xsl:when test="/iv:dbiv/@lang = 'en'"><xsl:text> to the search form</xsl:text></xsl:when>
            <xsl:when test="/iv:dbiv/@lang = 'de'"><xsl:text> zum Suchformular</xsl:text></xsl:when>
    </xsl:choose>
    <!-- startOver -->
</xsl:template>

<xsl:template name="orderClause">
    <!-- order by=""/ -->
    <xsl:for-each select="/iv:dbiv/iv:view/iv:order">
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
        <order>
            <xsl:if test="string-length(@by) &gt; 0">
                <xsl:attribute name="by"><xsl:value-of select="@by" /></xsl:attribute>
            </xsl:if>
            <xsl:if test="string-length(.)">
                <xsl:value-of select="." />
            </xsl:if>
            <xsl:if test="starts-with($rdbms, 'db2')">
                <xsl:value-of select="concat('', ' for fetch only with ur')" />
            </xsl:if>
        </order>
    </xsl:for-each>
    <!-- orderClause -->
</xsl:template>

<xsl:template name="counterClause">
    <!-- counter desc="Row,s"/ -->
    <xsl:for-each select="/iv:dbiv/iv:view/iv:counter">
        <xsl:value-of select='"&#10;&#32;&#x20;&#32;&#x20;&#32;&#x20;"' />
        <counter>
            <xsl:attribute name="desc"><xsl:value-of select="@desc" /></xsl:attribute>
        </counter>
    </xsl:for-each>
    <!-- counterClause -->
</xsl:template>

<xsl:template name="counterSingular">
    <xsl:value-of select="substring-before(/iv:dbiv/iv:view/iv:counter/@desc, ',')" />
    <!-- counterSingular -->
</xsl:template>

</xsl:stylesheet>
